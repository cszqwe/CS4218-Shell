package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTestCalApplication {

	public static boolean debug = false;

	@Test
	public void test001() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test001");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String[] str_array3 = null;
		java.io.InputStream inputStream4 = null;
		java.io.OutputStream outputStream5 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array3, inputStream4, outputStream5);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test002() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test002");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str4 = calApplication0.printCalForYear("        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test003() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test003");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String[] str_array7 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
				"        hi!         ", "        hi!         " };
		java.io.InputStream inputStream8 = null;
		java.io.OutputStream outputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array7, inputStream8, outputStream9);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array7);

	}

	@Test
	public void test004() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test004");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str4 = calApplication0.printCalForYearMondayFirst(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test005() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test005");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str4 = calApplication0.printCalForYearMondayFirst(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test006() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test006");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test007() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test007");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) ' ', 31);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
					"        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str7.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

	}

	@Test
	public void test008() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test008");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str3 = calApplication0.printCalForMonthYear(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
					"        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

	}

	@Test
	public void test009() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test009");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array4 = new java.lang.String[] {
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.io.InputStream inputStream5 = null;
		java.io.OutputStream outputStream6 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array4, inputStream5, outputStream6);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array4);

	}

	@Test
	public void test010() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test010");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYearMondayFirst("",
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test011() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test011");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForYear(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

	}

	@Test
	public void test012() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test012");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
					"        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test013() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test013");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str6 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

	}

	@Test
	public void test014() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test014");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYearMondayFirst(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test015() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test015");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForMonthYearMondayFirst("hi!",
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test016() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test016");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForMonthYearMondayFirst("1                     ", "");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test017() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test017");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) ' ', 31);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.getFirstLine("        hi!         ",
					"   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str7.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

	}

	@Test
	public void test018() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test018");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str4 = calApplication0.printCalForYear("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

	}

	@Test
	public void test019() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test019");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String[] str_array8 = new java.lang.String[] {
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.io.InputStream inputStream9 = null;
		java.io.OutputStream outputStream10 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array8, inputStream9, outputStream10);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array8);

	}

	@Test
	public void test020() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test020");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		java.lang.String[] str_array11 = new java.lang.String[] {
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"hi!", "   1  2  3  4  5  6 \n7  8  9  10         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test021() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test021");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.getFirstLine(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
					"");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1                     " + "'",
				str4.equals("1                     "));

	}

	@Test
	public void test022() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test022");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		int i5 = calApplication0.getMaxDaysInMonth((int) (byte) 10, (int) (byte) 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
					"hi!");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 30);

	}

	@Test
	public void test023() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test023");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str40 = calApplication0.printCalForMonthYear(
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test024() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test024");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYear("                    ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test025() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test025");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String[] str_array44 = new java.lang.String[] { "   1  2  3  4  5  6 \n7  8  9  10         ",
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
				"                    ", "                    ", "1                     ",
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n" };
		java.io.InputStream inputStream45 = null;
		java.io.OutputStream outputStream46 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array44, inputStream45, outputStream46);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array44);

	}

	@Test
	public void test026() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test026");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0
					.printCalForYearMondayFirst("   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test027() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test027");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.printCalForMonthYear("",
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

	}

	@Test
	public void test028() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test028");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForMonthYear("hi!",
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test029() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test029");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String[][] str_array_array3 = new java.lang.String[][] {};
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.processResultArray(str_array_array3,
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array3);

	}

	@Test
	public void test030() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test030");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str3 = calApplication0.printCalForMonthYearMondayFirst("hi!", "                    ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

	}

	@Test
	public void test031() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test031");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str6 = calApplication0.printCalForYear(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1                     " + "'",
				str4.equals("1                     "));

	}

	@Test
	public void test032() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test032");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYearMondayFirst("                              1",
					"   1               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test033() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test033");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYear("   1               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test034() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test034");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test035() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test035");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear("1                     ", "");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test036() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test036");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String[] str_array55 = new java.lang.String[] { "   1  2  3  4  5  6 \n7  8  9  10         ",
				"                    " };
		java.lang.String[][] str_array_array56 = new java.lang.String[][] { str_array55 };
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str58 = calApplication0.processResultArray(str_array_array56,
					"                              1");
			org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array55);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array56);

	}

	@Test
	public void test037() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test037");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYear(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
					"   1               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                              1" + "'",
				str7.equals("                              1"));

	}

	@Test
	public void test038() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test038");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str4 = calApplication0.printCalForYear("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test039() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test039");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str13 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

	}

	@Test
	public void test040() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test040");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str4 = calApplication0.printCalForYear("   1               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test041() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test041");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear("                              1",
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test042() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test042");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                          1",
					"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

	}

	@Test
	public void test043() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test043");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String[] str_array7 = new java.lang.String[] {
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"                              1",
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
				"                    ", "1                     ", "        hi!         " };
		java.io.InputStream inputStream8 = null;
		java.io.OutputStream outputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array7, inputStream8, outputStream9);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array7);

	}

	@Test
	public void test044() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test044");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str3 = calApplication0.printCalForMonthYear(
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
					"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

	}

	@Test
	public void test045() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test045");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0
					.printCalForYearMondayFirst("1  2  3  4  5  6  7 \n8  9  10            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

	}

	@Test
	public void test046() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test046");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
					"hi!");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test047() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test047");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 1);
		java.lang.String str10 = calApplication0.populateCalendarDays((int) 'a', (int) 'a');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                              1" + "'",
				str7.equals("                              1"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97"
						+ "'",
				str10.equals(
						"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97"));

	}

	@Test
	public void test048() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test048");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str59 = calApplication0.getFirstLine("",
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test049() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test049");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str10 = calApplication0.populateCalendarDays(30, 1);
		java.lang.String[] str_array12 = new java.lang.String[] { "                              1" };
		java.lang.String[] str_array14 = new java.lang.String[] { "                              1" };
		java.lang.String[] str_array16 = new java.lang.String[] { "                              1" };
		java.lang.String[] str_array18 = new java.lang.String[] { "                              1" };
		java.lang.String[] str_array20 = new java.lang.String[] { "                              1" };
		java.lang.String[][] str_array_array21 = new java.lang.String[][] { str_array12, str_array14, str_array16,
				str_array18, str_array20 };
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str23 = calApplication0.processResultArray(str_array_array21,
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '"
				+ "                                                                                          1" + "'",
				str10.equals(
						"                                                                                          1"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array12);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array18);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array21);

	}

	@Test
	public void test050() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test050");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String[] str_array57 = new java.lang.String[] {};
		java.io.InputStream inputStream58 = null;
		java.io.OutputStream outputStream59 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array57, inputStream58, outputStream59);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array57);

	}

	@Test
	public void test051() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test051");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForYearMondayFirst(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                              1" + "'",
				str7.equals("                              1"));

	}

	@Test
	public void test052() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test052");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForYear("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test053() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test053");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication7.printCal("");
		int i12 = calApplication7.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str14 = calApplication7.printCalWithMondayFirst("1                     ");
		java.lang.String str16 = calApplication7.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str19 = calApplication17.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str22 = calApplication20.printCal("");
		java.lang.String str24 = calApplication20.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array55 = new java.lang.String[][] { str_array30, str_array36, str_array42,
				str_array48, str_array54 };
		java.lang.String str57 = calApplication20.processResultArray(str_array_array55, "1                     ");
		java.lang.String str59 = calApplication17.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str61 = calApplication7.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str63 = calApplication0.processResultArray(str_array_array55,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str65 = calApplication0.printCalForYear(
					"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i12 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str14.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str16.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str19.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str24.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array55);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test054() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test054");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str6 = calApplication0.getFirstLine("   1  2  3  4  5  6 \n7  8  9  10         ",
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

	}

	@Test
	public void test055() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test055");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYear(
					"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test056() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test056");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYearMondayFirst(
					"1  2  3  4  5  6  7 \n8  9  10            ", "        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test057() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test057");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String str39 = calApplication0.indentFirstLine("                    ");
		java.lang.String str41 = calApplication0.printCalWithMondayFirst("   1               ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str39 + "' != '" + "                    " + "'",
				str39.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str41 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str41.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test058() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test058");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) ' ', 31);
		java.lang.String str9 = calApplication0.indentFirstLine("   1  2  3  4  5  6 \n7  8  9  10         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.printCalForMonthYearMondayFirst("",
					"                                                                                          1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str7.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10          " + "'",
				str9.equals("   1  2  3  4  5  6 \n7  8  9  10          "));

	}

	@Test
	public void test059() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test059");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str61 = calApplication0.printCalForMonthYear("1                     ",
					"                    ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 "
						+ "'",
				str58.equals(
						"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 "));

	}

	@Test
	public void test060() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test060");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str61 = calApplication0.printCalForMonthYear(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
					"1  2  3  4  5  6  7 \n8  9  10            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

	}

	@Test
	public void test061() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test061");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForMonthYear(
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"1                     ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test062() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test062");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForMonthYear("hi!",
					"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1                     " + "'",
				str4.equals("1                     "));

	}

	@Test
	public void test063() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test063");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		int i5 = calApplication0.getMaxDaysInMonth((int) (byte) 10, (int) (byte) 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear("   1  2  3  4  5  6 \n7  8  9  10          ",
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 30);

	}

	@Test
	public void test064() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test064");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("");
		java.lang.String str13 = calApplication9.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array44 = new java.lang.String[][] { str_array19, str_array25, str_array31,
				str_array37, str_array43 };
		java.lang.String str46 = calApplication9.processResultArray(str_array_array44, "1                     ");
		java.lang.String str48 = calApplication6.processResultArray(str_array_array44,
				"                                                                                          1");
		java.lang.String str50 = calApplication0.processResultArray(str_array_array44,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str52 = calApplication0.printCalForYear("   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str13 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str13.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array44);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str46 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str46.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str48 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str48.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str50 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str50.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test065() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test065");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.getFirstLine(
					"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

	}

	@Test
	public void test066() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test066");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		java.lang.String str60 = calApplication0.printCalWithMondayFirst("1                  ");
		java.lang.String[] str_array61 = null;
		java.io.InputStream inputStream62 = null;
		java.io.OutputStream outputStream63 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array61, inputStream62, outputStream63);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str60.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test067() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test067");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str5 = calApplication0.populateCalendarDays(0, (int) (short) 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYear("   1  2  3  4  5  6 \n7  8  9  10          ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1                  " + "'",
				str5.equals("1                  "));

	}

	@Test
	public void test068() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test068");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str7 = calApplication0.populateCalendarDays(0, (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYear("                    ",
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str7.equals("1  2  3  4  5  6  7 \n8  9  10            "));

	}

	@Test
	public void test069() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test069");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("1                     ");
		java.lang.String[] str_array6 = new java.lang.String[] {
				"                                                                                          1" };
		java.io.InputStream inputStream7 = null;
		java.io.OutputStream outputStream8 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array6, inputStream7, outputStream8);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1                     " + "'",
				str4.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array6);

	}

	@Test
	public void test070() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test070");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str44 = calApplication0.printCal("   1  2  3  4  5  6 \n7  8  9  10          ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str47 = calApplication0.printCalForMonthYearMondayFirst("1                  ",
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str44 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str44.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test071() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test071");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.getFirstLine("                    ",
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test072() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test072");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		java.lang.String[] str_array3 = new java.lang.String[] {};
		java.io.InputStream inputStream4 = null;
		java.io.OutputStream outputStream5 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array3, inputStream4, outputStream5);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array3);

	}

	@Test
	public void test073() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test073");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i55 = calApplication0.getMaxDaysInMonth((int) (short) 0, 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str57 = calApplication0.printCalForYearMondayFirst("   1               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i55 == 31);

	}

	@Test
	public void test074() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test074");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication7.printCal("");
		int i12 = calApplication7.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str14 = calApplication7.printCalWithMondayFirst("1                     ");
		java.lang.String str16 = calApplication7.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str19 = calApplication17.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str22 = calApplication20.printCal("");
		java.lang.String str24 = calApplication20.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array55 = new java.lang.String[][] { str_array30, str_array36, str_array42,
				str_array48, str_array54 };
		java.lang.String str57 = calApplication20.processResultArray(str_array_array55, "1                     ");
		java.lang.String str59 = calApplication17.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str61 = calApplication7.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str63 = calApplication0.processResultArray(str_array_array55,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String[] str_array69 = new java.lang.String[] {
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"                    ", "   1  2  3  4  5  6 \n7  8  9  10          ",
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
				"                              1" };
		java.io.InputStream inputStream70 = null;
		java.io.OutputStream outputStream71 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array69, inputStream70, outputStream71);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i12 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str14.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str16.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str19.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str24.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array55);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array69);

	}

	@Test
	public void test075() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test075");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test076() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test076");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.getFirstLine("   1  2  3  4  5  6 \n7  8  9  10         ",
					"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

	}

	@Test
	public void test077() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test077");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str2 = calApplication0.printCalForYearMondayFirst(
					"                                                                                          1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

	}

	@Test
	public void test078() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test078");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("");
		java.lang.String str13 = calApplication9.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array44 = new java.lang.String[][] { str_array19, str_array25, str_array31,
				str_array37, str_array43 };
		java.lang.String str46 = calApplication9.processResultArray(str_array_array44, "1                     ");
		java.lang.String str48 = calApplication6.processResultArray(str_array_array44,
				"                                                                                          1");
		java.lang.String str50 = calApplication0.processResultArray(str_array_array44,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str53 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
					"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str13 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str13.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array44);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str46 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str46.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str48 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str48.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str50 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str50.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test079() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test079");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str44 = calApplication0.indentFirstLine(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str46 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str44 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str44.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

	}

	@Test
	public void test080() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test080");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication7.printCal("");
		int i12 = calApplication7.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str14 = calApplication7.printCalWithMondayFirst("1                     ");
		java.lang.String str16 = calApplication7.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str19 = calApplication17.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str22 = calApplication20.printCal("");
		java.lang.String str24 = calApplication20.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array55 = new java.lang.String[][] { str_array30, str_array36, str_array42,
				str_array48, str_array54 };
		java.lang.String str57 = calApplication20.processResultArray(str_array_array55, "1                     ");
		java.lang.String str59 = calApplication17.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str61 = calApplication7.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str63 = calApplication0.processResultArray(str_array_array55,
				"   1  2  3  4  5  6 \n7  8  9  10          ");
		java.lang.String[] str_array64 = null;
		java.io.InputStream inputStream65 = null;
		java.io.OutputStream outputStream66 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array64, inputStream65, outputStream66);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i12 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str14.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str16.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str19.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str24.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array55);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test081() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test081");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		java.lang.String[] str_array9 = new java.lang.String[] { "                    ",
				"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                              ",
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                              1" };
		java.io.InputStream inputStream10 = null;
		java.io.OutputStream outputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array9, inputStream10, outputStream11);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array9);

	}

	@Test
	public void test082() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test082");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.indentFirstLine("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str56 = calApplication0.printCalForYearMondayFirst("                              1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str54 + "' != '" + "                    " + "'",
				str54.equals("                    "));

	}

	@Test
	public void test083() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test083");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.indentFirstLine(
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str58 = calApplication0.printCalForYear(
					"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test084() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test084");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		int i7 = calApplication0.getMaxDaysInMonth(10, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 30);

	}

	@Test
	public void test085() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test085");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str5 = calApplication0.populateCalendarDays(0, (int) (short) 1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst(
				"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
					"1                     ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1                  " + "'",
				str5.equals("1                  "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test086() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test086");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str2 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

	}

	@Test
	public void test087() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test087");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("        hi!         ");
		int i14 = calApplication9.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		java.lang.String str22 = calApplication18.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array46 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array52 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array53 = new java.lang.String[][] { str_array28, str_array34, str_array40,
				str_array46, str_array52 };
		java.lang.String str55 = calApplication18.processResultArray(str_array_array53, "1                     ");
		java.lang.String str57 = calApplication15.processResultArray(str_array_array53,
				"                                                                                          1");
		java.lang.String str59 = calApplication9.processResultArray(str_array_array53,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str61 = calApplication0.processResultArray(str_array_array53,
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str63 = calApplication0.printCal(
				"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str22.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array40);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array46);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array52);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str55 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str55.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str63.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test088() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test088");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("1                     ");
		int i7 = calApplication0.getMaxDaysInMonth((int) ' ', (int) '#');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1                     " + "'",
				str4.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 30);

	}

	@Test
	public void test089() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test089");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays(10, (int) (byte) -1);
		java.lang.String[] str_array14 = new java.lang.String[] {
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
				"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97",
				"1  2  3  4  5  6  7 \n8  9  10            " };
		java.io.InputStream inputStream15 = null;
		java.io.OutputStream outputStream16 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array14, inputStream15, outputStream16);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "                              " + "'",
				str8.equals("                              "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

	}

	@Test
	public void test090() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test090");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 1);
		java.lang.String str9 = calApplication0.printCal(
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                              1" + "'",
				str7.equals("                              1"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test091() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test091");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays(10, (int) (byte) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "                              " + "'",
				str8.equals("                              "));

	}

	@Test
	public void test092() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test092");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		int i6 = calApplication0.getMaxDaysInMonth((int) '#', 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForMonthYearMondayFirst(
					"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i6 == 31);

	}

	@Test
	public void test093() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test093");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("");
		java.lang.String str13 = calApplication9.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array44 = new java.lang.String[][] { str_array19, str_array25, str_array31,
				str_array37, str_array43 };
		java.lang.String str46 = calApplication9.processResultArray(str_array_array44, "1                     ");
		java.lang.String str48 = calApplication6.processResultArray(str_array_array44,
				"                                                                                          1");
		java.lang.String str50 = calApplication0.processResultArray(str_array_array44,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str52 = calApplication0.printCal(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str13 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str13.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array44);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str46 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str46.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str48 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str48.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str50 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str50.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str52.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test094() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test094");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String str39 = calApplication0.indentFirstLine("                    ");
		java.lang.String str41 = calApplication0.printCal("        hi!         ");
		java.lang.String[] str_array44 = new java.lang.String[] {
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"   1               " };
		java.io.InputStream inputStream45 = null;
		java.io.OutputStream outputStream46 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array44, inputStream45, outputStream46);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str39 + "' != '" + "                    " + "'",
				str39.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str41 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str41.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array44);

	}

	@Test
	public void test095() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test095");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		int i7 = calApplication0.getMaxDaysInMonth(10, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForYearMondayFirst("   1               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 30);

	}

	@Test
	public void test096() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test096");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test097() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test097");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str7 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String[] str_array8 = null;
		java.io.InputStream inputStream9 = null;
		java.io.OutputStream outputStream10 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array8, inputStream9, outputStream10);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test098() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test098");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		int i5 = calApplication0.getMaxDaysInMonth((int) (byte) 10, (int) (byte) 0);
		java.lang.String[] str_array10 = new java.lang.String[] {
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"   1               ", "1                     " };
		java.io.InputStream inputStream11 = null;
		java.io.OutputStream outputStream12 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array10, inputStream11, outputStream12);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

	}

	@Test
	public void test099() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test099");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.printCalWithMondayFirst(
				"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str58.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test100() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test100");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYear("1                  ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test101() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test101");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		java.lang.String str16 = calApplication0.printCalWithMondayFirst(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str16.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test102() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test102");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		int i7 = calApplication0.getMaxDaysInMonth(10, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.getFirstLine(
					"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                              1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 30);

	}

	@Test
	public void test103() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test103");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.getFirstLine(
					"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                          1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test104() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test104");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYear(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
					"1                  ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                              1" + "'",
				str7.equals("                              1"));

	}

	@Test
	public void test105() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test105");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str9 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.getFirstLine(
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test106() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test106");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str5 = calApplication0.printCalForMonthYear("",
					"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test107() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test107");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str61 = calApplication0.printCalForMonthYear("hi!",
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test108() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test108");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String[] str_array5 = new java.lang.String[] {};
		java.io.InputStream inputStream6 = null;
		java.io.OutputStream outputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array5, inputStream6, outputStream7);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array5);

	}

	@Test
	public void test109() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test109");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForMonthYear(
					"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test110() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test110");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str6 = calApplication3.populateCalendarDays(1, 10);
		java.lang.String str8 = calApplication3.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str10 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication11.populateCalendarDays(1, 10);
		java.lang.String str17 = calApplication11.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		int i23 = calApplication18.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str25 = calApplication18.printCalWithMondayFirst("1                     ");
		java.lang.String str27 = calApplication18.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str30 = calApplication28.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str33 = calApplication31.printCal("");
		java.lang.String str35 = calApplication31.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array59 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array66 = new java.lang.String[][] { str_array41, str_array47, str_array53,
				str_array59, str_array65 };
		java.lang.String str68 = calApplication31.processResultArray(str_array_array66, "1                     ");
		java.lang.String str70 = calApplication28.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str72 = calApplication18.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str74 = calApplication11.processResultArray(str_array_array66,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str76 = calApplication3.processResultArray(str_array_array66, "");
		java.lang.String str78 = calApplication0.processResultArray(str_array_array66,
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str81 = calApplication0.printCalForMonthYearMondayFirst("", "1                  ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str6.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str10.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str14.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "   1               " + "'",
				str17.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i23 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str25.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str30.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str33 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str33.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str35 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str35.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array65);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array66);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str68 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str68.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str70 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str70.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str72 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str72.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str74 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str74.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str76 + "' != '"
						+ "                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str76.equals(
						"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str78 + "' != '"
						+ "                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str78.equals(
						"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test111() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test111");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("        hi!         ");
		int i14 = calApplication9.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		java.lang.String str22 = calApplication18.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array46 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array52 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array53 = new java.lang.String[][] { str_array28, str_array34, str_array40,
				str_array46, str_array52 };
		java.lang.String str55 = calApplication18.processResultArray(str_array_array53, "1                     ");
		java.lang.String str57 = calApplication15.processResultArray(str_array_array53,
				"                                                                                          1");
		java.lang.String str59 = calApplication9.processResultArray(str_array_array53,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str61 = calApplication0.processResultArray(str_array_array53,
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str64 = calApplication0.printCalForMonthYear(
					"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"1                  ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str22.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array40);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array46);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array52);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str55 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str55.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test112() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test112");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str9 = calApplication0.printCalWithMondayFirst(
				"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str9.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test113() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test113");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForYear(
					"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test114() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test114");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str6 = calApplication3.populateCalendarDays(1, 10);
		java.lang.String str8 = calApplication3.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str10 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication11.populateCalendarDays(1, 10);
		java.lang.String str17 = calApplication11.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		int i23 = calApplication18.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str25 = calApplication18.printCalWithMondayFirst("1                     ");
		java.lang.String str27 = calApplication18.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str30 = calApplication28.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str33 = calApplication31.printCal("");
		java.lang.String str35 = calApplication31.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array59 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array66 = new java.lang.String[][] { str_array41, str_array47, str_array53,
				str_array59, str_array65 };
		java.lang.String str68 = calApplication31.processResultArray(str_array_array66, "1                     ");
		java.lang.String str70 = calApplication28.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str72 = calApplication18.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str74 = calApplication11.processResultArray(str_array_array66,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str76 = calApplication3.processResultArray(str_array_array66, "");
		java.lang.String str78 = calApplication0.processResultArray(str_array_array66,
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str81 = calApplication0.populateCalendarDays((-1), (int) ' ');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str6.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str10.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str14.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "   1               " + "'",
				str17.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i23 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str25.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str30.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str33 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str33.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str35 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str35.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array65);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array66);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str68 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str68.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str70 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str70.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str72 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str72.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str74 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str74.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str76 + "' != '"
						+ "                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str76.equals(
						"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str78 + "' != '"
						+ "                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str78.equals(
						"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str81 + "' != '"
						+ "1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            "
						+ "'",
				str81.equals(
						"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            "));

	}

	@Test
	public void test115() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test115");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str60 = calApplication0.printCalForYear(
					"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

	}

	@Test
	public void test116() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test116");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.getFirstLine(
					"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

	}

	@Test
	public void test117() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test117");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst("                              ",
					"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                              1" + "'",
				str7.equals("                              1"));

	}

	@Test
	public void test118() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test118");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String[] str_array62 = new java.lang.String[] { "                              ",
				"1                  " };
		java.io.InputStream inputStream63 = null;
		java.io.OutputStream outputStream64 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array62, inputStream63, outputStream64);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array62);

	}

	@Test
	public void test119() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test119");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.indentFirstLine("        hi!         ");
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("   1               ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst(
					"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                              ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "        hi!         " + "'",
				str5.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test120() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test120");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		int i61 = calApplication0.getMaxDaysInMonth((int) (byte) -1, 100);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str64 = calApplication0.printCalForMonthYearMondayFirst("",
					"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i61 == 31);

	}

	@Test
	public void test121() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test121");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		int i61 = calApplication0.getMaxDaysInMonth((int) (byte) -1, 100);
		java.lang.String str63 = calApplication0
				.printCal("                                                                                          ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i61 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str63.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test122() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test122");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str60 = calApplication0.printCalForYear("hi!");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test123() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test123");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i55 = calApplication0.getMaxDaysInMonth((int) (short) 0, 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str58 = calApplication0.getFirstLine("hi!",
					"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i55 == 31);

	}

	@Test
	public void test124() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test124");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str56 = calApplication0.printCal(
				"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str56.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test125() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test125");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str10 = calApplication0.populateCalendarDays(30, 1);
		java.lang.String str13 = calApplication0.populateCalendarDays(30, (int) (short) 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str16 = calApplication0.printCalForMonthYearMondayFirst("1                     ",
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '"
				+ "                                                                                          1" + "'",
				str10.equals(
						"                                                                                          1"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '"
				+ "                                                                                          " + "'",
				str13.equals(
						"                                                                                          "));

	}

	@Test
	public void test126() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test126");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str61 = calApplication0.printCalForMonthYearMondayFirst(
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             ",
					"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

	}

	@Test
	public void test127() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test127");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) 0, 0);
		java.lang.String[] str_array8 = new java.lang.String[] {
				"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      " };
		java.io.InputStream inputStream9 = null;
		java.io.OutputStream outputStream10 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array8, inputStream9, outputStream10);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array8);

	}

	@Test
	public void test128() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test128");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str7 = calApplication0.printCal(
				"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str9 = calApplication0.indentFirstLine("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str7.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "                    " + "'",
				str9.equals("                    "));

	}

	@Test
	public void test129() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test129");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String str39 = calApplication0.indentFirstLine("                    ");
		java.lang.String str41 = calApplication0.indentFirstLine(
				"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str39 + "' != '" + "                    " + "'",
				str39.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str41 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str41.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test130() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test130");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str9 = calApplication0.populateCalendarDays(10, (int) (byte) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str12 = calApplication10.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str15 = calApplication13.printCal("");
		java.lang.String str17 = calApplication13.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array23 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array29 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array48 = new java.lang.String[][] { str_array23, str_array29, str_array35,
				str_array41, str_array47 };
		java.lang.String str50 = calApplication13.processResultArray(str_array_array48, "1                     ");
		java.lang.String str52 = calApplication10.processResultArray(str_array_array48,
				"                                                                                          1");
		java.lang.String str54 = calApplication10.indentFirstLine(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str57 = calApplication55.printCal("");
		java.lang.String str59 = calApplication55.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array71 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array77 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array83 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array89 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array90 = new java.lang.String[][] { str_array65, str_array71, str_array77,
				str_array83, str_array89 };
		java.lang.String str92 = calApplication55.processResultArray(str_array_array90, "1                     ");
		java.lang.String str94 = calApplication10.processResultArray(str_array_array90,
				"1  2  3  4  5  6  7 \n8  9  10            ");
		java.lang.String str96 = calApplication0.processResultArray(str_array_array90,
				"                                                                                          1");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "                              " + "'",
				str9.equals("                              "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str12 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str12.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str15 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str15.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str17.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array23);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array29);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str50 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str50.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str54.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str57.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str59.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array65);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array71);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array77);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array83);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array89);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array90);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str92 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str92.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str94 + "' != '"
						+ "                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str94.equals(
						"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str96 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str96.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test131() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test131");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str3 = calApplication0.getFirstLine("   1  2  3  4  5  6 \n7  8  9  10          ",
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

	}

	@Test
	public void test132() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test132");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test133() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test133");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCalWithMondayFirst(
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str5.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test134() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test134");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str7 = calApplication0.populateCalendarDays(0, (int) (byte) 10);
		java.lang.String str10 = calApplication0.populateCalendarDays((int) ' ', (int) 'a');
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str13 = calApplication0.getFirstLine("",
					"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str7.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97"
						+ "'",
				str10.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97"));

	}

	@Test
	public void test135() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test135");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i55 = calApplication0.getMaxDaysInMonth((int) (short) 0, 10);
		java.lang.String str57 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i55 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str57.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test136() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test136");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYear(
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test137() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test137");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.getFirstLine(
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"1  2  3  4  5  6  7  8 \n9  10               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test138() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test138");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str62 = calApplication60.printCal("");
		java.lang.String str64 = calApplication60.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array70 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array76 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array82 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array88 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array94 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array95 = new java.lang.String[][] { str_array70, str_array76, str_array82,
				str_array88, str_array94 };
		java.lang.String str97 = calApplication60.processResultArray(str_array_array95, "1                     ");
		java.lang.String str99 = calApplication0.processResultArray(str_array_array95, "hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str62 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str62.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str64 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str64.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array70);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array76);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array82);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array88);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array94);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array95);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str97 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str97.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str99 + "' != '"
						+ "                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str99.equals(
						"                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test139() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test139");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String str39 = calApplication0.indentFirstLine("                    ");
		java.lang.String str41 = calApplication0.printCal("        hi!         ");
		java.lang.String str43 = calApplication0.printCalWithMondayFirst(
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str39 + "' != '" + "                    " + "'",
				str39.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str41 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str41.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str43 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str43.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test140() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test140");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str4 = calApplication0.printCal("                    ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str4.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test141() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test141");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
		java.lang.String str60 = calApplication0.printCal(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 "
						+ "'",
				str58.equals(
						"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str60.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test142() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test142");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication7.printCal("");
		int i12 = calApplication7.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str14 = calApplication7.printCalWithMondayFirst("1                     ");
		java.lang.String str16 = calApplication7.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str19 = calApplication17.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str22 = calApplication20.printCal("");
		java.lang.String str24 = calApplication20.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array55 = new java.lang.String[][] { str_array30, str_array36, str_array42,
				str_array48, str_array54 };
		java.lang.String str57 = calApplication20.processResultArray(str_array_array55, "1                     ");
		java.lang.String str59 = calApplication17.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str61 = calApplication7.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str63 = calApplication0.processResultArray(str_array_array55,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str65 = calApplication0.printCal("1                  ");
		java.lang.String[] str_array66 = new java.lang.String[] {};
		java.io.InputStream inputStream67 = null;
		java.io.OutputStream outputStream68 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array66, inputStream67, outputStream68);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i12 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str14.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str16.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str19.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str24.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array55);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str65.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array66);

	}

	@Test
	public void test143() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test143");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String[] str_array11 = new java.lang.String[] {
				"                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                                                                                          ",
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n " };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test144() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test144");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str6 = calApplication0.printCalForYearMondayFirst("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test145() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test145");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i9 = calApplication0.getMaxDaysInMonth(0, 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.printCalForMonthYear("   1  2  3  4  5  6 \n7  8  9  10          ",
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i9 == 31);

	}

	@Test
	public void test146() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test146");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str45 = calApplication0.populateCalendarDays((int) (short) 0, (int) (byte) 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str48 = calApplication0.printCalForMonthYearMondayFirst(
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ",
					"   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str45 + "' != '" + "" + "'", str45.equals(""));

	}

	@Test
	public void test147() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test147");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str17 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
					"1                  ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

	}

	@Test
	public void test148() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test148");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str9 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str12 = calApplication10.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str15 = calApplication13.printCal("");
		java.lang.String str17 = calApplication13.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array23 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array29 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array48 = new java.lang.String[][] { str_array23, str_array29, str_array35,
				str_array41, str_array47 };
		java.lang.String str50 = calApplication13.processResultArray(str_array_array48, "1                     ");
		java.lang.String str52 = calApplication10.processResultArray(str_array_array48,
				"                                                                                          1");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array48,
				"                                                                                          1");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str57 = calApplication0.printCalForMonthYear("                              ",
					"                                                                                          ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str12 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str12.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str15 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str15.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str17.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array23);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array29);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str50 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str50.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test149() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test149");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine("hi!");
		java.lang.String str9 = calApplication0.populateCalendarDays((-1), (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.getFirstLine(
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "        hi!         " + "'",
				str6.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1  2  3  4  5  6  7  8 \n9  10               " + "'",
				str9.equals("1  2  3  4  5  6  7  8 \n9  10               "));

	}

	@Test
	public void test150() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test150");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i55 = calApplication0.getMaxDaysInMonth((int) (short) 0, 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str58 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i55 == 31);

	}

	@Test
	public void test151() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test151");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String str61 = calApplication0.printCal(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
		java.lang.String str63 = calApplication0.printCal("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str61.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str63.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test152() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test152");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) 0, 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear(
					"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test153() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test153");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		int i6 = calApplication0.getMaxDaysInMonth((int) '#', 1);
		java.lang.String str9 = calApplication0.populateCalendarDays((int) (byte) -1, 10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i6 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1  2  3  4  5  6  7  8 \n9  10               " + "'",
				str9.equals("1  2  3  4  5  6  7  8 \n9  10               "));

	}

	@Test
	public void test154() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test154");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		java.lang.String str60 = calApplication0.printCal("   1  2  3  4  5  6 \n7  8  9  10         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str62 = calApplication0
					.printCalForYearMondayFirst("1  2  3  4  5  6  7 \n8  9  10            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str60.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test155() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test155");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str7 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYear("1  2  3  4  5  6  7 \n8  9  10            ",
					"                    ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test156() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test156");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str56 = calApplication0.indentFirstLine("1                     ");
		java.lang.String str58 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1                     " + "'",
				str56.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str58.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test157() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test157");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.getFirstLine(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97",
					"   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test158() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test158");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		int i8 = calApplication0.getMaxDaysInMonth(0, 100);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i8 == 31);

	}

	@Test
	public void test159() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test159");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) '#', (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForYear(
					"                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test160() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test160");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String str61 = calApplication0.printCalWithMondayFirst(
				"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str61.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test161() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test161");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("        hi!         ");
		int i14 = calApplication9.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		java.lang.String str22 = calApplication18.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array46 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array52 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array53 = new java.lang.String[][] { str_array28, str_array34, str_array40,
				str_array46, str_array52 };
		java.lang.String str55 = calApplication18.processResultArray(str_array_array53, "1                     ");
		java.lang.String str57 = calApplication15.processResultArray(str_array_array53,
				"                                                                                          1");
		java.lang.String str59 = calApplication9.processResultArray(str_array_array53,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str61 = calApplication0.processResultArray(str_array_array53,
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str63 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str22.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array40);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array46);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array52);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str55 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str55.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str63.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test162() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test162");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str4 = calApplication0.indentFirstLine(
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str6 = calApplication0.printCalForYearMondayFirst("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str4.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test163() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test163");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst("1  2  3  4  5  6  7 \n8  9  10            ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str58 = calApplication0.printCalForYear(
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test164() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test164");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		int i5 = calApplication0.getMaxDaysInMonth((int) (byte) 10, (int) (byte) 0);
		java.lang.String str7 = calApplication0.indentFirstLine("   1  2  3  4  5  6 \n7  8  9  10         ");
		java.lang.String str9 = calApplication0.printCal("1  2  3  4  5  6  7  8 \n9  10               ");
		java.lang.String str11 = calApplication0.printCalWithMondayFirst("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10          " + "'",
				str7.equals("   1  2  3  4  5  6 \n7  8  9  10          "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str11.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test165() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test165");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String str61 = calApplication0.indentFirstLine(
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "
						+ "'",
				str61.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "));

	}

	@Test
	public void test166() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test166");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i9 = calApplication0.getMaxDaysInMonth(0, 0);
		java.lang.String str12 = calApplication0.populateCalendarDays((int) '4', 31);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str15 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i9 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str12 + "' != '"
						+ "                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str12.equals(
						"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

	}

	@Test
	public void test167() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test167");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		int i5 = calApplication0.getMaxDaysInMonth((int) (byte) 10, (int) (byte) 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForMonthYear(
					"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 30);

	}

	@Test
	public void test168() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test168");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i9 = calApplication0.getMaxDaysInMonth(0, 0);
		java.lang.String str11 = calApplication0.indentFirstLine(
				"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		int i17 = calApplication12.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str19 = calApplication12.printCalWithMondayFirst("1                     ");
		java.lang.String str21 = calApplication12.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str24 = calApplication22.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str27 = calApplication25.printCal("");
		java.lang.String str29 = calApplication25.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array59 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array60 = new java.lang.String[][] { str_array35, str_array41, str_array47,
				str_array53, str_array59 };
		java.lang.String str62 = calApplication25.processResultArray(str_array_array60, "1                     ");
		java.lang.String str64 = calApplication22.processResultArray(str_array_array60,
				"                                                                                          1");
		java.lang.String str66 = calApplication12.processResultArray(str_array_array60,
				"                                                                                          1");
		java.lang.String str68 = calApplication0.processResultArray(str_array_array60,
				"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i9 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "
						+ "'",
				str11.equals(
						"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i17 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str21 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str21.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str24.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str29 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str29.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array60);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str62 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str62.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str64 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str64.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str66 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str66.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str68 + "' != '"
						+ "                                                                                                                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str68.equals(
						"                                                                                                                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test169() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test169");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst("1  2  3  4  5  6  7 \n8  9  10            ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str59 = calApplication0.getFirstLine(
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                                                                                                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test170() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test170");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		java.lang.String str16 = calApplication0.printCal(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str16.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test171() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test171");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		java.lang.String str14 = calApplication0.populateCalendarDays((int) (byte) 10, (int) '4');
		java.lang.String str16 = calApplication0.indentFirstLine(
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str18 = calApplication0
					.printCalForYearMondayFirst("1  2  3  4  5  6  7  8 \n9  10               ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52"
						+ "'",
				str14.equals(
						"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str16.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

	}

	@Test
	public void test172() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test172");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.getFirstLine("                              ",
					"                                                                                          ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test173() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test173");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str55 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
					"");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

	}

	@Test
	public void test174() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test174");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		int i61 = calApplication0.getMaxDaysInMonth((int) (byte) -1, 100);
		java.lang.String str64 = calApplication0.populateCalendarDays((int) (short) 1, 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str66 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i61 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str64 + "' != '" + "   " + "'", str64.equals("   "));

	}

	@Test
	public void test175() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test175");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		int i7 = calApplication0.getMaxDaysInMonth(0, 100);
		int i10 = calApplication0.getMaxDaysInMonth((int) '4', (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.printCalForYear(
					"                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i10 == 31);

	}

	@Test
	public void test176() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test176");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str57 = calApplication0.printCalForMonthYear(
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
					"   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test177() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test177");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str4 = calApplication0.indentFirstLine(
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str6 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForMonthYear(
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ",
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str4.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str6.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test178() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test178");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		int i7 = calApplication0.getMaxDaysInMonth(0, 100);
		int i10 = calApplication0.getMaxDaysInMonth((int) (byte) 10, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str13 = calApplication0.printCalForMonthYearMondayFirst(
					"   1  2  3  4  5  6 \n7  8  9  10          ",
					"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i10 == 30);

	}

	@Test
	public void test179() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test179");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str9 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.printCalForYearMondayFirst("        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test180() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test180");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test181() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test181");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst(
				"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test182() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test182");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String str61 = calApplication0.printCal(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str63 = calApplication0.printCalForYearMondayFirst("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str61.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test183() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test183");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("        hi!         ");
		int i20 = calApplication15.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str22 = calApplication15.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array29 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array36 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array43 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array50 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array57 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array64 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array65 = new java.lang.String[][] { str_array29, str_array36, str_array43,
				str_array50, str_array57, str_array64 };
		java.lang.String str67 = calApplication15.processResultArray(str_array_array65,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str69 = calApplication0.processResultArray(str_array_array65,
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i20 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str22.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array29);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array57);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array64);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array65);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str67 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str67.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str69 + "' != '"
						+ "                                                                                                                                                                                                                                                                                                                                 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str69.equals(
						"                                                                                                                                                                                                                                                                                                                                 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

	}

	@Test
	public void test184() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test184");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str9 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str12 = calApplication0.populateCalendarDays(30, 10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str9.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str12 + "' != '"
						+ "                                                                                          1  2  3  4  5  6  7  8  9  10"
						+ "'",
				str12.equals(
						"                                                                                          1  2  3  4  5  6  7  8  9  10"));

	}

	@Test
	public void test185() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test185");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i55 = calApplication0.getMaxDaysInMonth((int) (short) 0, 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str57 = calApplication0.printCalForYearMondayFirst(
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i55 == 31);

	}

	@Test
	public void test186() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test186");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str7 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication8.populateCalendarDays(1, 10);
		java.lang.String str14 = calApplication8.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		int i20 = calApplication15.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str22 = calApplication15.printCalWithMondayFirst("1                     ");
		java.lang.String str24 = calApplication15.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str27 = calApplication25.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str30 = calApplication28.printCal("");
		java.lang.String str32 = calApplication28.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array38 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array50 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array56 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array62 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array63 = new java.lang.String[][] { str_array38, str_array44, str_array50,
				str_array56, str_array62 };
		java.lang.String str65 = calApplication28.processResultArray(str_array_array63, "1                     ");
		java.lang.String str67 = calApplication25.processResultArray(str_array_array63,
				"                                                                                          1");
		java.lang.String str69 = calApplication15.processResultArray(str_array_array63,
				"                                                                                          1");
		java.lang.String str71 = calApplication8.processResultArray(str_array_array63,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str73 = calApplication0.processResultArray(str_array_array63, "");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str76 = calApplication0.printCalForMonthYearMondayFirst("",
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str11.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "   1               " + "'",
				str14.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i20 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str22.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str24.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str30.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str32 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str32.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array44);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array56);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array62);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array63);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str65.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str67 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str67.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str69 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str69.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str71 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str71.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str73 + "' != '"
						+ "                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str73.equals(
						"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test187() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test187");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		java.lang.String str8 = calApplication0.indentFirstLine(
				"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("        hi!         ");
		int i14 = calApplication9.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("        hi!         ");
		int i20 = calApplication15.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str23 = calApplication21.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str26 = calApplication24.printCal("");
		java.lang.String str28 = calApplication24.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array46 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array52 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array58 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array59 = new java.lang.String[][] { str_array34, str_array40, str_array46,
				str_array52, str_array58 };
		java.lang.String str61 = calApplication24.processResultArray(str_array_array59, "1                     ");
		java.lang.String str63 = calApplication21.processResultArray(str_array_array59,
				"                                                                                          1");
		java.lang.String str65 = calApplication15.processResultArray(str_array_array59,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str67 = calApplication9.processResultArray(str_array_array59, "        hi!         ");
		java.lang.String str69 = calApplication0.processResultArray(str_array_array59,
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str71 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "
						+ "'",
				str8.equals(
						"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i20 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str23 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str23.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str26 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str26.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str28 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str28.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array40);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array46);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array52);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array58);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str65.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str67 + "' != '"
						+ "                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str67.equals(
						"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str69 + "' != '"
						+ "                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str69.equals(
						"                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str71 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str71.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test188() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test188");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test189() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test189");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		java.lang.String str16 = calApplication0.indentFirstLine("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str19 = calApplication17.printCal("");
		java.lang.String str21 = calApplication17.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array33 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array39 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array45 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array51 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array52 = new java.lang.String[][] { str_array27, str_array33, str_array39,
				str_array45, str_array51 };
		java.lang.String str54 = calApplication17.processResultArray(str_array_array52, "1                     ");
		java.lang.String str56 = calApplication0.processResultArray(str_array_array52,
				"1  2  3  4  5  6  7  8 \n9  10               ");
		java.lang.String str58 = calApplication0.indentFirstLine("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "                    " + "'",
				str16.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str19.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str21 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str21.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array27);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array33);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array39);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array45);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array51);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array52);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                              1  2  3  4  5  6  7  8 \n9  10               \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                              1  2  3  4  5  6  7  8 \n9  10               \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "                    " + "'",
				str58.equals("                    "));

	}

	@Test
	public void test190() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test190");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str7 = calApplication0.printCalForYearMondayFirst("");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test191() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test191");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str8 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str8.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test192() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test192");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		java.lang.String str60 = calApplication0.printCal("   1  2  3  4  5  6 \n7  8  9  10         ");
		java.lang.String str63 = calApplication0.populateCalendarDays((int) '4', (int) ' ');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str60.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32"
						+ "'",
				str63.equals(
						"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32"));

	}

	@Test
	public void test193() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test193");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str56 = calApplication0.indentFirstLine("1                     ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str59 = calApplication0.printCalForMonthYearMondayFirst(
					"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                    ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1                     " + "'",
				str56.equals("1                     "));

	}

	@Test
	public void test194() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test194");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str44 = calApplication0.indentFirstLine(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str47 = calApplication0.populateCalendarDays((int) '4', (-1));
		java.lang.String[] str_array53 = new java.lang.String[] { "                              1",
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52",
				"   1               ",
				"                              \n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
				"1  2  3  4  5  6  7  8 \n9  10               " };
		java.io.InputStream inputStream54 = null;
		java.io.OutputStream outputStream55 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array53, inputStream54, outputStream55);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str44 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str44.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str47 + "' != '"
						+ "                                                                                                                                                            "
						+ "'",
				str47.equals(
						"                                                                                                                                                            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

	}

	@Test
	public void test195() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test195");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String str39 = calApplication0.printCal(
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i42 = calApplication0.getMaxDaysInMonth(31, 30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str39 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str39.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i42 == 31);

	}

	@Test
	public void test196() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test196");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		java.lang.String str60 = calApplication0.printCalWithMondayFirst("1                  ");
		java.lang.String str62 = calApplication0.printCalWithMondayFirst(
				"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str60.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str62 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str62.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test197() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test197");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine("hi!");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                                                 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
					"                                                                                                                                                            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "        hi!         " + "'",
				str6.equals("        hi!         "));

	}

	@Test
	public void test198() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test198");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str6 = calApplication3.populateCalendarDays(1, 10);
		java.lang.String str8 = calApplication3.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str10 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication11.populateCalendarDays(1, 10);
		java.lang.String str17 = calApplication11.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		int i23 = calApplication18.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str25 = calApplication18.printCalWithMondayFirst("1                     ");
		java.lang.String str27 = calApplication18.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str30 = calApplication28.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str33 = calApplication31.printCal("");
		java.lang.String str35 = calApplication31.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array59 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array66 = new java.lang.String[][] { str_array41, str_array47, str_array53,
				str_array59, str_array65 };
		java.lang.String str68 = calApplication31.processResultArray(str_array_array66, "1                     ");
		java.lang.String str70 = calApplication28.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str72 = calApplication18.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str74 = calApplication11.processResultArray(str_array_array66,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str76 = calApplication3.processResultArray(str_array_array66, "");
		java.lang.String str78 = calApplication0.processResultArray(str_array_array66,
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str81 = calApplication0.populateCalendarDays((int) (short) 10, (int) (byte) 0);
		java.lang.String str83 = calApplication0.printCalWithMondayFirst("   1  2  3  4  5  6 \n7  8  9  10          ");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str6.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str10.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str14.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "   1               " + "'",
				str17.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i23 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str25.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str30.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str33 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str33.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str35 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str35.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array65);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array66);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str68 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str68.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str70 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str70.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str72 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str72.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str74 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str74.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str76 + "' != '"
						+ "                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str76.equals(
						"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str78 + "' != '"
						+ "                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str78.equals(
						"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str81 + "' != '" + "                              " + "'",
				str81.equals("                              "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str83 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str83.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test199() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test199");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		java.lang.String str4 = calApplication0.printCal("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str4.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test200() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test200");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForYear(
					"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

	}

	@Test
	public void test201() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test201");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.indentFirstLine("hi!");
		int i5 = calApplication0.getMaxDaysInMonth((int) (byte) 10, (int) (byte) 0);
		java.lang.String str7 = calApplication0.indentFirstLine("   1  2  3  4  5  6 \n7  8  9  10         ");
		java.lang.String str9 = calApplication0.printCal("1  2  3  4  5  6  7  8 \n9  10               ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
					"                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "        hi!         " + "'",
				str2.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10          " + "'",
				str7.equals("   1  2  3  4  5  6 \n7  8  9  10          "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test202() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test202");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str7 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str10 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n ",
					"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test203() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test203");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication6.populateCalendarDays(1, 10);
		java.lang.String str12 = calApplication6.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str15 = calApplication13.printCal("");
		int i18 = calApplication13.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str20 = calApplication13.printCalWithMondayFirst("1                     ");
		java.lang.String str22 = calApplication13.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str25 = calApplication23.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str28 = calApplication26.printCal("");
		java.lang.String str30 = calApplication26.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array60 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array61 = new java.lang.String[][] { str_array36, str_array42, str_array48,
				str_array54, str_array60 };
		java.lang.String str63 = calApplication26.processResultArray(str_array_array61, "1                     ");
		java.lang.String str65 = calApplication23.processResultArray(str_array_array61,
				"                                                                                          1");
		java.lang.String str67 = calApplication13.processResultArray(str_array_array61,
				"                                                                                          1");
		java.lang.String str69 = calApplication6.processResultArray(str_array_array61,
				"   1  2  3  4  5  6 \n7  8  9  10          ");
		java.lang.String str71 = calApplication0.processResultArray(str_array_array61,
				"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str73 = calApplication0.indentFirstLine(
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str75 = calApplication0.printCalForYear(
					"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str9.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "   1               " + "'",
				str12.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str15 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str15.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i18 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str20.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str25.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str28 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str28.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str30.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array60);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array61);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str65.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str67 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str67.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str69 + "' != '"
						+ "                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str69.equals(
						"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str71 + "' != '"
						+ "                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str71.equals(
						"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str73 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "
						+ "'",
				str73.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "));

	}

	@Test
	public void test204() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test204");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		int i8 = calApplication0.getMaxDaysInMonth((int) (byte) 100, (int) (short) 100);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i8 == 31);

	}

	@Test
	public void test205() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test205");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		int i10 = calApplication0.getMaxDaysInMonth((int) ' ', (int) (byte) 10);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.printCalForYear(
					"                              \n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i10 == 30);

	}

	@Test
	public void test206() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test206");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str56 = calApplication0.indentFirstLine("1                     ");
		java.lang.String str58 = calApplication0.printCal(
				"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str60 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1                     " + "'",
				str56.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str58.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str60.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test207() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test207");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.getFirstLine(
					"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

	}

	@Test
	public void test208() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test208");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str44 = calApplication0.indentFirstLine(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str46 = calApplication0.printCalWithMondayFirst(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i49 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 100);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str44 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str44.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str46 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str46.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i49 == 31);

	}

	@Test
	public void test209() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test209");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.indentFirstLine("");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str57 = calApplication0.printCalForMonthYear("        hi!         ",
					"   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str54 + "' != '" + "                    " + "'",
				str54.equals("                    "));

	}

	@Test
	public void test210() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test210");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		java.lang.String str8 = calApplication0.indentFirstLine(
				"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str11 = calApplication9.printCal("        hi!         ");
		int i14 = calApplication9.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		java.lang.String str22 = calApplication18.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array46 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array52 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array53 = new java.lang.String[][] { str_array28, str_array34, str_array40,
				str_array46, str_array52 };
		java.lang.String str55 = calApplication18.processResultArray(str_array_array53, "1                     ");
		java.lang.String str57 = calApplication15.processResultArray(str_array_array53,
				"                                                                                          1");
		java.lang.String str59 = calApplication9.processResultArray(str_array_array53,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str61 = calApplication0.processResultArray(str_array_array53,
				"   1  2  3  4  5  6 \n7  8  9  10          ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str64 = calApplication0.printCalForMonthYear(
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ",
					"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "
						+ "'",
				str8.equals(
						"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str11 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str11.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str22.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array40);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array46);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array52);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str55 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str55.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test211() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test211");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		java.lang.String str60 = calApplication0.printCal("   1  2  3  4  5  6 \n7  8  9  10          ");
		java.lang.String str63 = calApplication0.populateCalendarDays((int) (byte) 0, 0);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str60.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str63 + "' != '" + "" + "'", str63.equals(""));

	}

	@Test
	public void test212() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test212");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str6 = calApplication0.printCalWithMondayFirst(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str8 = calApplication0.printCal("        hi!         ");
		int i11 = calApplication0.getMaxDaysInMonth((int) '#', (int) (byte) 1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str6.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

	}

	@Test
	public void test213() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test213");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.indentFirstLine("        hi!         ");
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("   1               ");
		java.lang.String str9 = calApplication0.indentFirstLine(
				"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "        hi!         " + "'",
				str5.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str9.equals(
						"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test214() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test214");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str45 = calApplication43.printCal("        hi!         ");
		int i48 = calApplication43.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str51 = calApplication49.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str54 = calApplication52.printCal("");
		java.lang.String str56 = calApplication52.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array62 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array68 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array74 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array80 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array86 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array87 = new java.lang.String[][] { str_array62, str_array68, str_array74,
				str_array80, str_array86 };
		java.lang.String str89 = calApplication52.processResultArray(str_array_array87, "1                     ");
		java.lang.String str91 = calApplication49.processResultArray(str_array_array87,
				"                                                                                          1");
		java.lang.String str93 = calApplication43.processResultArray(str_array_array87,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str95 = calApplication0.processResultArray(str_array_array87,
				"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str45 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str45.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i48 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str51 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str51.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str54.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array62);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array68);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array74);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array80);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array86);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array87);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str89 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str89.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str91 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str91.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str93 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str93.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str95 + "' != '"
						+ "                                                                                          1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str95.equals(
						"                                                                                          1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test215() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test215");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		java.lang.String str13 = calApplication0.indentFirstLine("");
		java.lang.String str16 = calApplication0.populateCalendarDays((int) (byte) 100, (int) (short) 0);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "                    " + "'",
				str13.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str16 + "' != '"
						+ "                                                                                                                                                                                                                                                                                                            "
						+ "'",
				str16.equals(
						"                                                                                                                                                                                                                                                                                                            "));

	}

	@Test
	public void test216() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test216");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str44 = calApplication0.printCal("   1  2  3  4  5  6 \n7  8  9  10          ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str46 = calApplication0.printCalForYearMondayFirst(
					"                                      hi!         \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str44 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str44.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test217() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test217");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str5 = calApplication3.printCal("");
		java.lang.String str7 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array38 = new java.lang.String[][] { str_array13, str_array19, str_array25,
				str_array31, str_array37 };
		java.lang.String str40 = calApplication3.processResultArray(str_array_array38, "1                     ");
		java.lang.String str42 = calApplication0.processResultArray(str_array_array38,
				"                                                                                          1");
		java.lang.String str44 = calApplication0.indentFirstLine(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str46 = calApplication0.printCalWithMondayFirst(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str48 = calApplication0.printCal(
				"                                                               1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str51 = calApplication0.getFirstLine("                    ",
					"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array38);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str40 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str40.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str42 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str42.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str44 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str44.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str46 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str46.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str48 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str48.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test218() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test218");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array35 = new java.lang.String[][] { str_array10, str_array16, str_array22,
				str_array28, str_array34 };
		java.lang.String str37 = calApplication0.processResultArray(str_array_array35, "1                     ");
		java.lang.String str39 = calApplication0.indentFirstLine("                    ");
		java.lang.String str41 = calApplication0.indentFirstLine(
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n ");
		java.lang.String str43 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                                                                                                                                                                                                                                 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str37 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str37.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str39 + "' != '" + "                    " + "'",
				str39.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str41 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "
						+ "'",
				str41.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str43 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str43.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test219() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test219");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		java.lang.String[] str_array64 = new java.lang.String[] {
				"                              1  2  3  4  5  6  7  8 \n9  10               \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"                              \n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n",
				"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
				"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ",
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n" };
		java.io.InputStream inputStream65 = null;
		java.io.OutputStream outputStream66 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array64, inputStream65, outputStream66);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array64);

	}

	@Test
	public void test220() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test220");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		java.lang.String str8 = calApplication0.indentFirstLine(
				"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32            ");
		java.lang.String str10 = calApplication0
				.printCal("                                                                                          ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str13 = calApplication0.getFirstLine(
					"                                                                                                                                                                                                                                                                                                            ",
					"                                                                                          1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "
						+ "'",
				str8.equals(
						"1  2  3  4  5  6  7  8 \n9  10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31 32             "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str10.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test221() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test221");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str4 = calApplication0.indentFirstLine(
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str6 = calApplication0.printCal(
				"                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                                                            ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str4.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str6.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test222() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test222");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		java.lang.String str60 = calApplication0.printCalWithMondayFirst("1                  ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str62 = calApplication0.printCalForYearMondayFirst("        hi!         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str60.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test223() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test223");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str9 = calApplication0.printCalForMonthYearMondayFirst(
					"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test224() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test224");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str56 = calApplication0.indentFirstLine("1                     ");
		java.lang.String str58 = calApplication0.printCal(
				"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str61 = calApplication0.printCalForMonthYear(
					"                              hi!\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"   1  2  3  4  5  6 \n7  8  9  10         ");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1                     " + "'",
				str56.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str58.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test225() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test225");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String str61 = calApplication0.printCal(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
		java.lang.String str63 = calApplication0.printCal("1  2  3  4  5  6  7  8 \n9  10               ");
		java.lang.String str65 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str68 = calApplication0.getFirstLine(
					"                              1  2  3  4  5  6  7 \n8  9  10            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                              1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str61.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str63.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str65.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test226() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test226");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCal(
				"                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str4.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test227() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test227");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		int i61 = calApplication0.getMaxDaysInMonth((int) (byte) -1, 100);
		java.lang.String str64 = calApplication0.populateCalendarDays((int) (short) 1, 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str67 = calApplication0.getFirstLine(
					"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n",
					"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i61 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str64 + "' != '" + "   " + "'", str64.equals("   "));

	}

	@Test
	public void test228() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test228");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst("1  2  3  4  5  6  7 \n8  9  10            ");
		int i59 = calApplication0.getMaxDaysInMonth((int) (byte) 1, (int) '4');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i59 == 29);

	}

	@Test
	public void test229() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test229");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication7.printCal("");
		int i12 = calApplication7.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str15 = calApplication7.populateCalendarDays((int) (byte) -1, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str18 = calApplication16.printCal("        hi!         ");
		int i21 = calApplication16.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str24 = calApplication22.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str27 = calApplication25.printCal("");
		java.lang.String str29 = calApplication25.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array59 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array60 = new java.lang.String[][] { str_array35, str_array41, str_array47,
				str_array53, str_array59 };
		java.lang.String str62 = calApplication25.processResultArray(str_array_array60, "1                     ");
		java.lang.String str64 = calApplication22.processResultArray(str_array_array60,
				"                                                                                          1");
		java.lang.String str66 = calApplication16.processResultArray(str_array_array60,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str68 = calApplication7.processResultArray(str_array_array60,
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str70 = calApplication0.processResultArray(str_array_array60,
				"                                                                                                                                                                                                                                                                                                                                 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str9.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i12 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1                     " + "'",
				str15.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str18 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str18.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i21 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str24.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str29 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str29.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array60);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str62 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str62.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str64 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str64.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str66 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str66.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str68 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str68.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str70 + "' != '"
						+ "                                                                                                                                                                                                                                                                                                                                                               1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str70.equals(
						"                                                                                                                                                                                                                                                                                                                                                               1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

	}

	@Test
	public void test230() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test230");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str4 = calApplication0.indentFirstLine(
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str6 = calApplication0.printCalWithMondayFirst(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str8 = calApplication0.printCalForYear(
					"                                                                                                                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str4.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str6.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test231() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test231");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str6 = calApplication0.populateCalendarDays(1, (int) (short) 1);
		int i9 = calApplication0.getMaxDaysInMonth((int) (short) 100, (int) '4');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1               " + "'",
				str6.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i9 == 31);

	}

	@Test
	public void test232() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test232");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str6 = calApplication3.populateCalendarDays(1, 10);
		java.lang.String str8 = calApplication3.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str10 = calApplication3.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication11.populateCalendarDays(1, 10);
		java.lang.String str17 = calApplication11.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str20 = calApplication18.printCal("");
		int i23 = calApplication18.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str25 = calApplication18.printCalWithMondayFirst("1                     ");
		java.lang.String str27 = calApplication18.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str30 = calApplication28.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str33 = calApplication31.printCal("");
		java.lang.String str35 = calApplication31.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array59 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array66 = new java.lang.String[][] { str_array41, str_array47, str_array53,
				str_array59, str_array65 };
		java.lang.String str68 = calApplication31.processResultArray(str_array_array66, "1                     ");
		java.lang.String str70 = calApplication28.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str72 = calApplication18.processResultArray(str_array_array66,
				"                                                                                          1");
		java.lang.String str74 = calApplication11.processResultArray(str_array_array66,
				"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str76 = calApplication3.processResultArray(str_array_array66, "");
		java.lang.String str78 = calApplication0.processResultArray(str_array_array66,
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String[] str_array80 = new java.lang.String[] { "hi!" };
		java.io.InputStream inputStream81 = null;
		java.io.OutputStream outputStream82 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array80, inputStream81, outputStream82);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
		} catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str6.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str10.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str14.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "   1               " + "'",
				str17.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str20.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i23 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str25.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str27 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str27.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str30.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str33 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str33.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str35 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str35.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array41);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array47);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array53);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array59);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array65);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array66);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str68 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str68.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str70 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str70.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str72 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str72.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str74 + "' != '"
						+ "                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str74.equals(
						"                                                                                                                                                      1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str76 + "' != '"
						+ "                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str76.equals(
						"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str78 + "' != '"
						+ "                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str78.equals(
						"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array80);

	}

	@Test
	public void test233() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test233");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str6 = calApplication0.printCalWithMondayFirst(
				"                              1  2  3  4  5  6  7  8 \n9  10               \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str6.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test234() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test234");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str7 = calApplication5.printCal("");
		int i10 = calApplication5.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str13 = calApplication11.printCal("        hi!         ");
		int i16 = calApplication11.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str19 = calApplication17.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str22 = calApplication20.printCal("");
		java.lang.String str24 = calApplication20.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array55 = new java.lang.String[][] { str_array30, str_array36, str_array42,
				str_array48, str_array54 };
		java.lang.String str57 = calApplication20.processResultArray(str_array_array55, "1                     ");
		java.lang.String str59 = calApplication17.processResultArray(str_array_array55,
				"                                                                                          1");
		java.lang.String str61 = calApplication11.processResultArray(str_array_array55,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str63 = calApplication5.processResultArray(str_array_array55,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		java.lang.String str65 = calApplication0.processResultArray(str_array_array55,
				"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str68 = calApplication0.populateCalendarDays((int) (short) 0, (int) (byte) 10);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str7.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i10 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str13 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str13.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i16 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str19.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str24 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str24.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array30);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array55);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str57.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str59 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str59.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str61.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "                                                               1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str65.equals(
						"                                                               1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str68 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str68.equals("1  2  3  4  5  6  7 \n8  9  10            "));

	}

	@Test
	public void test235() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test235");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		java.lang.String str4 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String str7 = calApplication0.populateCalendarDays((int) ' ', 31);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str10 = calApplication8.printCal("        hi!         ");
		int i13 = calApplication8.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str15 = calApplication8.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array22 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array29 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array36 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array43 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array50 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array57 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array58 = new java.lang.String[][] { str_array22, str_array29, str_array36,
				str_array43, str_array50, str_array57 };
		java.lang.String str60 = calApplication8.processResultArray(str_array_array58,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str62 = calApplication0.processResultArray(str_array_array58, "");
		java.lang.String str65 = calApplication0.populateCalendarDays(1, 1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str4 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str4.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
						+ "'",
				str7.equals(
						"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str10 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str10.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i13 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str15 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str15.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array29);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array57);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array58);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str60.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str62 + "' != '"
						+ "                              \n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str62.equals(
						"                              \n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str65 + "' != '" + "   1               " + "'",
				str65.equals("   1               "));

	}

	@Test
	public void test236() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test236");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str59 = calApplication0.populateCalendarDays((int) (short) 0, (int) (short) 10);
		java.lang.String str61 = calApplication0.printCal(
				"                                                                                                                                                                                                                                                                                                   1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97");
		java.lang.String str63 = calApplication0.printCal("1  2  3  4  5  6  7  8 \n9  10               ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str65 = calApplication0.printCalForYearMondayFirst(
					"                                                               1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1  2  3  4  5  6  7 \n8  9  10            " + "'",
				str59.equals("1  2  3  4  5  6  7 \n8  9  10            "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str61 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str61.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str63.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test237() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test237");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		java.lang.String str58 = calApplication0.indentFirstLine("hi!");
		java.lang.String str60 = calApplication0.indentFirstLine(
				"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str58 + "' != '" + "        hi!         " + "'",
				str58.equals("        hi!         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str60 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "
						+ "'",
				str60.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n "));

	}

	@Test
	public void test238() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test238");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i55 = calApplication0.getMaxDaysInMonth((int) (short) 0, 10);
		java.lang.String str57 = calApplication0.printCal(
				"                                                               1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str59 = calApplication0.printCalForYearMondayFirst(
					"                                   March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i55 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str57 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str57.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test239() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test239");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		int i5 = calApplication0.getMaxDaysInMonth((int) (short) -1, (int) (byte) 10);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("        hi!         ");
		java.lang.String[] str_array14 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array21 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array28 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array35 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array42 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[] str_array49 = new java.lang.String[] { "        hi!         ",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
				"",
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array14, str_array21, str_array28,
				str_array35, str_array42, str_array49 };
		java.lang.String str52 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str54 = calApplication0.printCalWithMondayFirst("                    ");
		java.lang.String str56 = calApplication0.printCalWithMondayFirst(
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ");
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str58 = calApplication0.printCalForYearMondayFirst("                              1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array35);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"
						+ "'",
				str52.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str54.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str56.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

	}

	@Test
	public void test240() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test240");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str9 = calApplication0.printCalWithMondayFirst(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		int i12 = calApplication0.getMaxDaysInMonth((int) (byte) 1, (int) ' ');

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str9 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str9.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i12 == 29);

	}

	@Test
	public void test241() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test241");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str7 = calApplication0.printCalWithMondayFirst("1                     ");
		java.lang.String str10 = calApplication0.populateCalendarDays(30, 1);
		java.lang.String[] str_array11 = null;
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			calApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str7 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str7.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '"
				+ "                                                                                          1" + "'",
				str10.equals(
						"                                                                                          1"));

	}

	@Test
	public void test242() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test242");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth(0, (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str8 = calApplication6.printCal("        hi!         ");
		int i11 = calApplication6.getMaxDaysInMonth((int) '#', (int) (short) -1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str14 = calApplication12.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication12.processResultArray(str_array_array50,
				"                                                                                          1");
		java.lang.String str56 = calApplication6.processResultArray(str_array_array50,
				"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str58 = calApplication0.processResultArray(str_array_array50,
				"                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52");
		int i61 = calApplication0.getMaxDaysInMonth((int) (byte) -1, 100);
		java.lang.String str64 = calApplication0.populateCalendarDays((int) (short) 0, (int) (byte) 100);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str8 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str8.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str14 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str14.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str56 + "' != '"
						+ "                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str56.equals(
						"                                                            1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str58.equals(
						"                                                            1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i61 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str64 + "' != '"
						+ "1  2  3  4  5  6  7 \n8  9  10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31 32 33 34 35\n36 37 38 39 40 41 42\n43 44 45 46 47 48 49\n50 51 52 53 54 55 56\n57 58 59 60 61 62 63\n64 65 66 67 68 69 70\n71 72 73 74 75 76 77\n78 79 80 81 82 83 84\n85 86 87 88 89 90 91\n92 93 94 95 96 97 98\n99 100               "
						+ "'",
				str64.equals(
						"1  2  3  4  5  6  7 \n8  9  10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31 32 33 34 35\n36 37 38 39 40 41 42\n43 44 45 46 47 48 49\n50 51 52 53 54 55 56\n57 58 59 60 61 62 63\n64 65 66 67 68 69 70\n71 72 73 74 75 76 77\n78 79 80 81 82 83 84\n85 86 87 88 89 90 91\n92 93 94 95 96 97 98\n99 100               "));

	}

	@Test
	public void test243() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test243");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		int i7 = calApplication0.getMaxDaysInMonth(0, 100);
		int i10 = calApplication0.getMaxDaysInMonth((int) (byte) 10, 1);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str12 = calApplication0.printCalForYear(
					"                                                                                          1");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i7 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i10 == 30);

	}

	@Test
	public void test244() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test244");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("");
		int i5 = calApplication0.getMaxDaysInMonth((int) '4', (int) (short) 10);
		java.lang.String str8 = calApplication0.populateCalendarDays((int) (byte) -1, 1);
		int i11 = calApplication0.getMaxDaysInMonth((int) (byte) 100, 0);
		int i14 = calApplication0.getMaxDaysInMonth(30, 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str17 = calApplication15.printCal("");
		java.lang.String str19 = calApplication15.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array50 = new java.lang.String[][] { str_array25, str_array31, str_array37,
				str_array43, str_array49 };
		java.lang.String str52 = calApplication15.processResultArray(str_array_array50, "1                     ");
		java.lang.String str54 = calApplication0.processResultArray(str_array_array50,
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		java.lang.String str56 = calApplication0.indentFirstLine("1                     ");
		java.lang.String str58 = calApplication0.printCal(
				"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i61 = calApplication0.getMaxDaysInMonth((int) '4', 100);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i5 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1                     " + "'",
				str8.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i11 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i14 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str17 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str17.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str19 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str19.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array37);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array43);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array49);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array50);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str52 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str52.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str54 + "' != '"
						+ "                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str54.equals(
						"                                                                                                                              1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1                     " + "'",
				str56.equals("1                     "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str58 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str58.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i61 == 31);

	}

	@Test
	public void test245() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test245");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication6.populateCalendarDays(1, 10);
		java.lang.String str12 = calApplication6.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str15 = calApplication13.printCal("");
		int i18 = calApplication13.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str20 = calApplication13.printCalWithMondayFirst("1                     ");
		java.lang.String str22 = calApplication13.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str25 = calApplication23.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str28 = calApplication26.printCal("");
		java.lang.String str30 = calApplication26.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array60 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array61 = new java.lang.String[][] { str_array36, str_array42, str_array48,
				str_array54, str_array60 };
		java.lang.String str63 = calApplication26.processResultArray(str_array_array61, "1                     ");
		java.lang.String str65 = calApplication23.processResultArray(str_array_array61,
				"                                                                                          1");
		java.lang.String str67 = calApplication13.processResultArray(str_array_array61,
				"                                                                                          1");
		java.lang.String str69 = calApplication6.processResultArray(str_array_array61,
				"   1  2  3  4  5  6 \n7  8  9  10          ");
		java.lang.String str71 = calApplication0.processResultArray(str_array_array61,
				"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str73 = calApplication0.printCal("1                     ");
		java.lang.String str75 = calApplication0.printCal(
				"                                                                                                                                                                                          1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str9.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "   1               " + "'",
				str12.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str15 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str15.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i18 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str20.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str25.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str28 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str28.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str30.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array60);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array61);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str65.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str67 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str67.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str69 + "' != '"
						+ "                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str69.equals(
						"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str71 + "' != '"
						+ "                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str71.equals(
						"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str73 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str73.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str75 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str75.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

	}

	@Test
	public void test246() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test246");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str2 = calApplication0.printCal("        hi!         ");
		java.lang.String str4 = calApplication0.indentFirstLine("");
		java.lang.String str6 = calApplication0.indentFirstLine(
				"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		int i9 = calApplication0.getMaxDaysInMonth(0, 0);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.lang.String str11 = calApplication0.printCalForYearMondayFirst(
					"                                                                                                                                                                                                                                                                                                                                 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n\n        hi!                March 2017               hi!         \n\n");
			org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
		} catch (java.lang.NumberFormatException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str2 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str2.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "                    " + "'",
				str4.equals("                    "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str6 + "' != '"
						+ "                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str6.equals(
						"                                   March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i9 == 31);

	}

	@Test
	public void test247() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test247");
		}

		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str3 = calApplication0.populateCalendarDays(1, 10);
		java.lang.String str5 = calApplication0.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str9 = calApplication6.populateCalendarDays(1, 10);
		java.lang.String str12 = calApplication6.populateCalendarDays(1, (int) (short) 1);
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str15 = calApplication13.printCal("");
		int i18 = calApplication13.getMaxDaysInMonth(0, (int) (short) -1);
		java.lang.String str20 = calApplication13.printCalWithMondayFirst("1                     ");
		java.lang.String str22 = calApplication13.printCal(
				"                                                                                                1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str25 = calApplication23.printCal("");
		sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
		java.lang.String str28 = calApplication26.printCal("");
		java.lang.String str30 = calApplication26.printCalWithMondayFirst(
				"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   ");
		java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array54 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[] str_array60 = new java.lang.String[] { "hi!", "",
				"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      ",
				"        hi!         ", "   1  2  3  4  5  6 \n7  8  9  10         " };
		java.lang.String[][] str_array_array61 = new java.lang.String[][] { str_array36, str_array42, str_array48,
				str_array54, str_array60 };
		java.lang.String str63 = calApplication26.processResultArray(str_array_array61, "1                     ");
		java.lang.String str65 = calApplication23.processResultArray(str_array_array61,
				"                                                                                          1");
		java.lang.String str67 = calApplication13.processResultArray(str_array_array61,
				"                                                                                          1");
		java.lang.String str69 = calApplication6.processResultArray(str_array_array61,
				"   1  2  3  4  5  6 \n7  8  9  10          ");
		java.lang.String str71 = calApplication0.processResultArray(str_array_array61,
				"                              \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n");
		java.lang.String str74 = calApplication0.populateCalendarDays(0, 29);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str3.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str5 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str5.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "   1  2  3  4  5  6 \n7  8  9  10         " + "'",
				str9.equals("   1  2  3  4  5  6 \n7  8  9  10         "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "   1               " + "'",
				str12.equals("   1               "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str15 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str15.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(i18 == 31);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str20 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str20.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str22 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str22.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str25 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str25.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str28 + "' != '"
						+ "     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "
						+ "'",
				str28.equals(
						"     March 2017     \nSu Mo Tu We Th Fr Sa\n         1  2  3  4 \n5  6  7  8  9  10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31   "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str30 + "' != '"
						+ "     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "
						+ "'",
				str30.equals(
						"     March 2017     \nMo Tu We Th Fr Sa Su\n      1  2  3  4  5 \n6  7  8  9  10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31      "));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array36);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array42);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array48);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array54);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array60);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array_array61);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str63 + "' != '"
						+ "                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str63.equals(
						"                              1                     \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str65 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str65.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str67 + "' != '"
						+ "                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str67.equals(
						"                                                                                                                        1\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str69 + "' != '"
						+ "                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str69.equals(
						"                                 1  2  3  4  5  6 \n7  8  9  10          \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str71 + "' != '"
						+ "                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"
						+ "'",
				str71.equals(
						"                                                            \nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n\nhi!         March 2017     \n\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(
				"'" + str74 + "' != '"
						+ "1  2  3  4  5  6  7 \n8  9  10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29                  "
						+ "'",
				str74.equals(
						"1  2  3  4  5  6  7 \n8  9  10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29                  "));

	}

}
