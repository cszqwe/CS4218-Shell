package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTestSortApplication {

	public static boolean debug = false;

	@Test
	public void test001() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test001");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.io.InputStream inputStream5 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream5);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test002() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test002");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "hi!" };
		java.util.ArrayList<java.lang.String> arraylist_str6 = new java.util.ArrayList<java.lang.String>();
		boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) arraylist_str6, str_array5);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str8 = sortApplication0.getFilesContents(arraylist_str6);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array5);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(b7 == true);

	}

	@Test
	public void test003() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test003");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.io.InputStream inputStream5 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream5);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test004() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test004");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!", "", "", "\n", "\n" };
		java.io.InputStream inputStream8 = null;
		java.io.OutputStream outputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array7, inputStream8, outputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array7);

	}

	@Test
	public void test005() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test005");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test006() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test006");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "hi!" };
		java.util.ArrayList<java.lang.String> arraylist_str10 = new java.util.ArrayList<java.lang.String>();
		boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) arraylist_str10,
				str_array9);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication0.getFilesContents(arraylist_str10);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(b11 == true);

	}

	@Test
	public void test007() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test007");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.io.InputStream inputStream3 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream3);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

	}

	@Test
	public void test008() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test008");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "" };
		java.util.ArrayList<java.lang.String> arraylist_str12 = new java.util.ArrayList<java.lang.String>();
		boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) arraylist_str12,
				str_array11);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str14 = sortApplication0.getFilesContents(arraylist_str12);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(b13 == true);

	}

	@Test
	public void test009() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test009");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String[] str_array8 = new java.lang.String[] { "hi!", "\n", "" };
		java.io.InputStream inputStream9 = null;
		java.io.OutputStream outputStream10 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array8, inputStream9, outputStream10);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array8);

	}

	@Test
	public void test010() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test010");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test011() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test011");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String[] str_array5 = new java.lang.String[] {};
		java.io.InputStream inputStream6 = null;
		java.io.OutputStream outputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array5, inputStream6, outputStream7);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array5);

	}

	@Test
	public void test012() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test012");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String[] str_array9 = new java.lang.String[] { "\n", "", "\n", "", "", "" };
		java.io.InputStream inputStream10 = null;
		java.io.OutputStream outputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array9, inputStream10, outputStream11);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array9);

	}

	@Test
	public void test013() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test013");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.io.InputStream inputStream5 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream5);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test014() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test014");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.io.InputStream inputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test015() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test015");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str11 = sortApplication9.sortNumbers("hi!");
		java.lang.String str13 = sortApplication9.sortCapitalSpecialChars("hi!");
		java.lang.String str15 = sortApplication9.sortSimpleCapital("\n");
		java.lang.String str17 = sortApplication9.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str18 = sortApplication9.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication0.getFilesContents(arraylist_str18);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str18);

	}

	@Test
	public void test016() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test016");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String[] str_array16 = new java.lang.String[] { "\n" };
		java.io.InputStream inputStream17 = null;
		java.io.OutputStream outputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array16, inputStream17, outputStream18);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

	}

	@Test
	public void test017() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test017");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String[] str_array17 = new java.lang.String[] { "\n", "", "", "hi!" };
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array17);

	}

	@Test
	public void test018() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test018");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String[] str_array16 = new java.lang.String[] { "" };
		java.io.InputStream inputStream17 = null;
		java.io.OutputStream outputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array16, inputStream17, outputStream18);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

	}

	@Test
	public void test019() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test019");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.io.InputStream inputStream10 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream10);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

	}

	@Test
	public void test020() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test020");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str9 = sortApplication7.sortNumbers("hi!");
		java.lang.String str11 = sortApplication7.sortCapitalSpecialChars("");
		java.lang.String str13 = sortApplication7.sortSimpleCapitalNumber("\n");
		java.lang.String str15 = sortApplication7.sortNumbersSpecialChars("\n");
		java.lang.String str17 = sortApplication7.sortCapitalNumbers("");
		java.lang.String str19 = sortApplication7.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication7.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getFilesContents(arraylist_str20);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str20);

	}

	@Test
	public void test021() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test021");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.io.InputStream inputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test022() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test022");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String[] str_array17 = new java.lang.String[] { "\n", "\n" };
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array17);

	}

	@Test
	public void test023() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test023");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test024() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test024");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test025() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test025");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str14 = sortApplication12.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication12.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str16 = sortApplication0.getFilesContents(arraylist_str15);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

	}

	@Test
	public void test026() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test026");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test027() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test027");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test028() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test028");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.io.InputStream inputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test029() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test029");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test030() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test030");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str15 = sortApplication13.sortNumbers("hi!");
		java.lang.String str17 = sortApplication13.sortCapitalSpecialChars("hi!");
		java.lang.String str19 = sortApplication13.sortSimpleCapital("\n");
		java.lang.String str21 = sortApplication13.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication13.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication0.getFilesContents(arraylist_str22);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str22);

	}

	@Test
	public void test031() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test031");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String[] str_array23 = new java.lang.String[] { "hi!", "\n", "\n", "", "", "" };
		java.io.InputStream inputStream24 = null;
		java.io.OutputStream outputStream25 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array23, inputStream24, outputStream25);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array23);

	}

	@Test
	public void test032() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test032");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sort("");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test033() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test033");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test034() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test034");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str17 = sortApplication15.sortNumbers("hi!");
		java.lang.String str19 = sortApplication15.sortCapitalSpecialChars("hi!");
		java.lang.String str21 = sortApplication15.sortAll("\n");
		java.lang.String str23 = sortApplication15.sort("\n");
		java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication15.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str25 = sortApplication0.getFilesContents(arraylist_str24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str24);

	}

	@Test
	public void test035() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test035");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test036() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test036");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str21 = sortApplication19.sortAll("hi!");
		java.lang.String str23 = sortApplication19.sortSpecialChars("");
		java.lang.String str25 = sortApplication19.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str26 = sortApplication19.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str27 = sortApplication0.getFilesContents(arraylist_str26);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str26);

	}

	@Test
	public void test037() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test037");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", false, false, false, false);
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test038() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test038");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String[] str_array15 = new java.lang.String[] { "\n", "hi!", "hi!" };
		java.io.InputStream inputStream16 = null;
		java.io.OutputStream outputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array15, inputStream16, outputStream17);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array15);

	}

	@Test
	public void test039() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test039");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test040() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test040");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test041() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test041");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String[] str_array17 = new java.lang.String[] {};
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array17);

	}

	@Test
	public void test042() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test042");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.util.ArrayList<java.lang.String> arraylist_str7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str8 = sortApplication0.getFilesContents(arraylist_str7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test043() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test043");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test044() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test044");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str8 = sortApplication0.sort("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test045() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test045");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str7 = sortApplication0.sortSimpleSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str10 = sortApplication8.sortNumbers("hi!");
		java.lang.String str12 = sortApplication8.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication8.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication8.sortNumbersSpecialChars("\n");
		java.lang.String str18 = sortApplication8.sortCapitalNumbers("");
		java.lang.String str20 = sortApplication8.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication8.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication0.getFilesContents(arraylist_str21);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str21);

	}

	@Test
	public void test046() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test046");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test047() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test047");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String[] str_array11 = new java.lang.String[] { "\n", "" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test048() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test048");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

	}

	@Test
	public void test049() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test049");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test050() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test050");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str15 = sortApplication13.sortAll("hi!");
		java.lang.String str17 = sortApplication13.sortSpecialChars("");
		java.lang.String str19 = sortApplication13.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication13.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getFilesContents(arraylist_str20);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str20);

	}

	@Test
	public void test051() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test051");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String[] str_array24 = new java.lang.String[] { "\n", "hi!", "hi!", "\n", "" };
		java.io.InputStream inputStream25 = null;
		java.io.OutputStream outputStream26 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array24, inputStream25, outputStream26);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array24);

	}

	@Test
	public void test052() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test052");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication5 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str7 = sortApplication5.sortNumbers("hi!");
		java.lang.String str9 = sortApplication5.sortCapitalSpecialChars("hi!");
		java.lang.String str11 = sortApplication5.sortAll("\n");
		java.lang.String str13 = sortApplication5.sort("\n");
		java.util.ArrayList<java.lang.String> arraylist_str14 = sortApplication5.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getFilesContents(arraylist_str14);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str14);

	}

	@Test
	public void test053() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test053");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str9 = sortApplication7.sortAll("hi!");
		java.lang.String str11 = sortApplication7.sortStringsCapital("");
		java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication7.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getFilesContents(arraylist_str12);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str12);

	}

	@Test
	public void test054() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test054");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str14 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test055() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test055");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str11 = sortApplication9.sortNumbers("hi!");
		java.lang.String str13 = sortApplication9.sortCapitalSpecialChars("hi!");
		java.lang.String str15 = sortApplication9.sortSimpleCapital("\n");
		java.lang.String str17 = sortApplication9.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str18 = sortApplication9.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication0.getFilesContents(arraylist_str18);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str18);

	}

	@Test
	public void test056() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test056");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str16 = sortApplication0.sort("\n");
		java.lang.String[] str_array17 = null;
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test057() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test057");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test058() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test058");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test059() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test059");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test060() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test060");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortAll("\n");
		java.io.InputStream inputStream6 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream6);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

	}

	@Test
	public void test061() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test061");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str13 = sortApplication0.sortNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test062() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test062");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test063() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test063");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test064() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test064");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsCapital("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str14 = sortApplication13.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getFilesContents(arraylist_str14);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str14);

	}

	@Test
	public void test065() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test065");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str21 = sortApplication19.sortNumbers("hi!");
		java.lang.String str23 = sortApplication19.sortCapitalSpecialChars("hi!");
		java.lang.String str25 = sortApplication19.sortSimpleCapital("\n");
		java.lang.String str27 = sortApplication19.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str28 = sortApplication19.getStdinContents();
		java.lang.String str30 = sortApplication19.sortSimpleNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str31 = sortApplication19.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str32 = sortApplication0.getFilesContents(arraylist_str31);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\n" + "'", str27.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str28);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str31);

	}

	@Test
	public void test066() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test066");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str20 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test067() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test067");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test068() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test068");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortAll("\n");
		java.lang.String str7 = sortApplication0.sortSimpleCapitalNumber("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test069() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test069");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test070() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test070");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test071() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test071");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", false, false, true, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test072() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test072");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test073() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test073");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String[] str_array12 = new java.lang.String[] { "\n" };
		java.io.InputStream inputStream13 = null;
		java.io.OutputStream outputStream14 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array12, inputStream13, outputStream14);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array12);

	}

	@Test
	public void test074() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test074");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("");
		java.lang.String[] str_array14 = new java.lang.String[] { "hi!" };
		java.io.InputStream inputStream15 = null;
		java.io.OutputStream outputStream16 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array14, inputStream15, outputStream16);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

	}

	@Test
	public void test075() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test075");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str18 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String[] str_array23 = new java.lang.String[] { "\n", "hi!", "hi!", "\n" };
		java.io.InputStream inputStream24 = null;
		java.io.OutputStream outputStream25 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array23, inputStream24, outputStream25);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array23);

	}

	@Test
	public void test076() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test076");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.io.InputStream inputStream29 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream29);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

	}

	@Test
	public void test077() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test077");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("hi!");
		java.io.InputStream inputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test078() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test078");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, false, false, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test079() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test079");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "", "" };
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array17);

	}

	@Test
	public void test080() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test080");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test081() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test081");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "hi!", "" };
		java.io.InputStream inputStream23 = null;
		java.io.OutputStream outputStream24 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array22, inputStream23, outputStream24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

	}

	@Test
	public void test082() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test082");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str21 = sortApplication15.invokeSortFunction("hi!", true, false, true, true);
		java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication15.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication0.getFilesContents(arraylist_str22);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str22);

	}

	@Test
	public void test083() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test083");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.io.InputStream inputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream19);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test084() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test084");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.io.InputStream inputStream6 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream6);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

	}

	@Test
	public void test085() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test085");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str13 = sortApplication11.sortNumbers("hi!");
		java.lang.String str15 = sortApplication11.sortCapitalSpecialChars("");
		java.lang.String str17 = sortApplication11.sortSimpleCapitalNumber("\n");
		java.lang.String str23 = sortApplication11.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str29 = sortApplication11.invokeSortFunction("", false, true, true, true);
		java.lang.String str31 = sortApplication11.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str32 = sortApplication11.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str33 = sortApplication0.getFilesContents(arraylist_str32);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\n" + "'", str29.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\n" + "'", str31.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str32);

	}

	@Test
	public void test086() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test086");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortSimpleNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test087() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test087");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test088() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test088");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortNumbers("");
		java.lang.String[] str_array12 = new java.lang.String[] { "" };
		java.io.InputStream inputStream13 = null;
		java.io.OutputStream outputStream14 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array12, inputStream13, outputStream14);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array12);

	}

	@Test
	public void test089() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test089");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");
		java.lang.String[] str_array21 = new java.lang.String[] { "", "", "", "\n" };
		java.io.InputStream inputStream22 = null;
		java.io.OutputStream outputStream23 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array21, inputStream22, outputStream23);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

	}

	@Test
	public void test090() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test090");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getStdinContents();
		java.lang.String[] str_array27 = new java.lang.String[] { "\n", "\n", "\n", "\n", "\n" };
		java.io.InputStream inputStream28 = null;
		java.io.OutputStream outputStream29 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array27, inputStream28, outputStream29);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array27);

	}

	@Test
	public void test091() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test091");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str18 = sortApplication0.sortSimpleNumbers("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication19 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str21 = sortApplication19.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication19.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication0.getFilesContents(arraylist_str22);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str22);

	}

	@Test
	public void test092() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test092");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String[] str_array11 = new java.lang.String[] { "\n", "" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test093() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test093");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test094() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test094");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test095() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test095");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String[] str_array11 = new java.lang.String[] { "", "", "hi!", "hi!", "\n", "\n" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test096() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test096");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sort("");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test097() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test097");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

	}

	@Test
	public void test098() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test098");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sort("hi!");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test099() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test099");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str16 = sortApplication14.sortAll("hi!");
		java.lang.String str18 = sortApplication14.sortStringsCapital("");
		java.lang.String str20 = sortApplication14.sortAll("hi!");
		java.lang.String str26 = sortApplication14.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str28 = sortApplication14.sortSimpleCapitalNumber("\n");
		java.util.ArrayList<java.lang.String> arraylist_str29 = sortApplication14.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str30 = sortApplication0.getFilesContents(arraylist_str29);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str29);

	}

	@Test
	public void test100() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test100");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test101() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test101");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test102() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test102");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test103() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test103");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("\n");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test104() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test104");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test105() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test105");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.io.InputStream inputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test106() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test106");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String[] str_array20 = new java.lang.String[] { "", "\n", "\n" };
		java.io.InputStream inputStream21 = null;
		java.io.OutputStream outputStream22 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array20, inputStream21, outputStream22);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

	}

	@Test
	public void test107() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test107");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str15 = sortApplication13.sortAll("hi!");
		java.lang.String str17 = sortApplication13.sortStringsCapital("");
		java.lang.String str19 = sortApplication13.sortAll("hi!");
		java.lang.String str21 = sortApplication13.sortNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication13.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication0.getFilesContents(arraylist_str22);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str22);

	}

	@Test
	public void test108() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test108");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str11 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str11);

	}

	@Test
	public void test109() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test109");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test110() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test110");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortStringsSimple("");
		java.lang.String str9 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.io.InputStream inputStream10 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream10);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test111() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test111");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test112() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test112");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbers("hi!");
		java.lang.String[] str_array18 = new java.lang.String[] { "\n", "", "", "\n", "\n" };
		java.io.InputStream inputStream19 = null;
		java.io.OutputStream outputStream20 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array18, inputStream19, outputStream20);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array18);

	}

	@Test
	public void test113() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test113");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortAll("hi!");
		java.lang.String str19 = sortApplication0.sortSimpleSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test114() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test114");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str18 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str20 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str22 = sortApplication0.sortSimpleNumbersSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication23 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str25 = sortApplication23.sortNumbers("hi!");
		java.lang.String str27 = sortApplication23.sortCapitalSpecialChars("");
		java.lang.String str29 = sortApplication23.sortSimpleCapitalNumber("\n");
		java.lang.String str31 = sortApplication23.sortNumbersSpecialChars("\n");
		java.lang.String str33 = sortApplication23.sortCapitalNumbers("");
		java.lang.String str35 = sortApplication23.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str36 = sortApplication23.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str37 = sortApplication0.getFilesContents(arraylist_str36);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\n" + "'", str27.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\n" + "'", str29.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\n" + "'", str31.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\n" + "'", str33.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\n" + "'", str35.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str36);

	}

	@Test
	public void test115() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test115");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test116() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test116");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test117() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test117");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test118() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test118");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbers("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str13 = sortApplication11.sortNumbers("hi!");
		java.lang.String str15 = sortApplication11.sortCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication11.sortSimpleCapital("\n");
		java.lang.String str19 = sortApplication11.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication11.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getFilesContents(arraylist_str20);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str20);

	}

	@Test
	public void test119() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test119");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "\n", "\n", "\n", "\n", "\n" };
		java.io.InputStream inputStream20 = null;
		java.io.OutputStream outputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array19, inputStream20, outputStream21);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

	}

	@Test
	public void test120() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test120");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String[] str_array14 = new java.lang.String[] { "", "hi!", "hi!", "\n", "" };
		java.io.InputStream inputStream15 = null;
		java.io.OutputStream outputStream16 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array14, inputStream15, outputStream16);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array14);

	}

	@Test
	public void test121() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test121");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test122() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test122");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapital("");
		java.lang.String str12 = sortApplication0.sortStringsCapital("\n");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test123() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test123");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

	}

	@Test
	public void test124() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test124");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str11 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str11);

	}

	@Test
	public void test125() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test125");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str13 = sortApplication0.sortStringsCapital("\n");
		java.lang.String[] str_array19 = new java.lang.String[] { "\n", "", "hi!", "hi!", "\n" };
		java.io.InputStream inputStream20 = null;
		java.io.OutputStream outputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array19, inputStream20, outputStream21);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

	}

	@Test
	public void test126() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test126");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str20 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test127() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test127");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sort("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test128() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test128");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test129() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test129");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();
		java.lang.String str19 = sortApplication0.sortSpecialChars("\n");
		java.lang.String str21 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test130() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test130");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str11 = sortApplication0.sortNumbers("hi!");
		java.lang.String str13 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test131() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test131");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortStringsCapital("");
		java.lang.String[] str_array17 = new java.lang.String[] { "", "hi!" };
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array17);

	}

	@Test
	public void test132() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test132");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortAll("");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test133() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test133");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str1 = sortApplication0.getStdinContents();
		java.lang.String str3 = sortApplication0.sort("\n");
		java.lang.String str5 = sortApplication0.sortStringsSimple("");
		java.lang.String str7 = sortApplication0.sort("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\n" + "'", str3.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test134() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test134");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test135() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test135");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortStringsCapital("\n");
		java.lang.String[] str_array16 = new java.lang.String[] { "\n", "", "\n" };
		java.io.InputStream inputStream17 = null;
		java.io.OutputStream outputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array16, inputStream17, outputStream18);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

	}

	@Test
	public void test136() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test136");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str17 = sortApplication15.sortAll("hi!");
		java.lang.String str19 = sortApplication15.sortStringsCapital("");
		java.lang.String str21 = sortApplication15.sortAll("hi!");
		java.lang.String str27 = sortApplication15.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str29 = sortApplication15.sortSimpleNumbers("hi!");
		java.lang.String str31 = sortApplication15.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str32 = sortApplication15.getStdinContents();
		java.util.ArrayList<java.lang.String> arraylist_str33 = sortApplication15.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str34 = sortApplication0.getFilesContents(arraylist_str33);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\n" + "'", str27.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\n" + "'", str29.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\n" + "'", str31.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str32);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str33);

	}

	@Test
	public void test137() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test137");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test138() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test138");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test139() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test139");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str16 = sortApplication0.sort("hi!");
		java.io.InputStream inputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream17);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test140() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test140");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str16 = sortApplication0.getStdinContents();
		java.lang.String str18 = sortApplication0.sortSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str16);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test141() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test141");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str11 = sortApplication0.getStdinContents();
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication12 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str14 = sortApplication12.sortNumbers("hi!");
		java.lang.String str16 = sortApplication12.sortAll("");
		java.lang.String str18 = sortApplication12.sortSimpleSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication12.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication0.getFilesContents(arraylist_str19);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str11);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str19);

	}

	@Test
	public void test142() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test142");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test143() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test143");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test144() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test144");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test145() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test145");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbers("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str19 = sortApplication17.sortNumbers("hi!");
		java.lang.String str21 = sortApplication17.sortCapitalSpecialChars("hi!");
		java.lang.String str23 = sortApplication17.sortSimpleCapital("\n");
		java.lang.String str25 = sortApplication17.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str26 = sortApplication17.getStdinContents();
		java.lang.String str28 = sortApplication17.sortSimpleNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str29 = sortApplication17.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str30 = sortApplication0.getFilesContents(arraylist_str29);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str26);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str29);

	}

	@Test
	public void test146() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test146");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sort("\n");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test147() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test147");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortNumbers("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test148() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test148");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str8 = sortApplication0.sortStringsSimple("");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str13 = sortApplication11.sortNumbers("hi!");
		java.lang.String str15 = sortApplication11.sortCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication11.sortSimpleCapital("\n");
		java.lang.String str19 = sortApplication11.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication11.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getFilesContents(arraylist_str20);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str20);

	}

	@Test
	public void test149() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test149");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication0.getStdinContents();
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str16 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str12);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test150() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test150");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String[] str_array15 = new java.lang.String[] {};
		java.io.InputStream inputStream16 = null;
		java.io.OutputStream outputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array15, inputStream16, outputStream17);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array15);

	}

	@Test
	public void test151() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test151");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test152() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test152");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test153() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test153");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test154() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test154");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test155() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test155");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test156() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test156");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str24 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test157() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test157");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str9 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test158() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test158");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str18 = sortApplication0.sortSimpleSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test159() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test159");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str22 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test160() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test160");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortNumbers("");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test161() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test161");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str1 = sortApplication0.getStdinContents();
		java.lang.String str3 = sortApplication0.sort("\n");
		java.lang.String str5 = sortApplication0.sortStringsSimple("");
		java.lang.String str7 = sortApplication0.sortSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\n" + "'", str3.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test162() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test162");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str20 = sortApplication0.invokeSortFunction("", false, false, false, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test163() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test163");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test164() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test164");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sort("");
		java.lang.String str14 = sortApplication0.invokeSortFunction("\n", false, true, false, false);
		java.lang.String str16 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test165() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test165");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str15 = sortApplication0.sortAll("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test166() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test166");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test167() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test167");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test168() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test168");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str8 = sortApplication0.sortStringsSimple("");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test169() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test169");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.lang.String str22 = sortApplication0.invokeSortFunction("hi!", false, false, true, false);
		java.lang.String str24 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str26 = sortApplication0.sortStringsSimple("");
		java.lang.String str28 = sortApplication0.sortSimpleSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

	}

	@Test
	public void test170() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test170");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortNumbers("");
		java.lang.String[] str_array16 = new java.lang.String[] { "", "hi!", "hi!", "\n", "hi!" };
		java.io.InputStream inputStream17 = null;
		java.io.OutputStream outputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array16, inputStream17, outputStream18);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

	}

	@Test
	public void test171() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test171");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str18 = sortApplication0.sortSimpleCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test172() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test172");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String str18 = sortApplication0.sortSimpleSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test173() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test173");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("");
		java.lang.String str14 = sortApplication0.sortAll("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication15 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str16 = sortApplication15.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getFilesContents(arraylist_str16);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str16);

	}

	@Test
	public void test174() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test174");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbersSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str13 = sortApplication11.sortAll("hi!");
		java.lang.String str15 = sortApplication11.sortStringsCapital("");
		java.lang.String str21 = sortApplication11.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str27 = sortApplication11.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str29 = sortApplication11.sortNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str30 = sortApplication11.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str31 = sortApplication0.getFilesContents(arraylist_str30);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\n" + "'", str27.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\n" + "'", str29.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str30);

	}

	@Test
	public void test175() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test175");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str13 = sortApplication0.invokeSortFunction("", true, true, false, true);
		java.lang.String str15 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str17 = sortApplication0.sortNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

	}

	@Test
	public void test176() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test176");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test177() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test177");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapital("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test178() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test178");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!", "\n", "", "", "" };
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test179() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test179");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test180() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test180");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sort("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str15 = sortApplication13.sortAll("hi!");
		java.lang.String str17 = sortApplication13.sortStringsCapital("");
		java.lang.String str19 = sortApplication13.sortAll("hi!");
		java.lang.String str25 = sortApplication13.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str27 = sortApplication13.sortSimpleCapitalNumber("\n");
		java.util.ArrayList<java.lang.String> arraylist_str28 = sortApplication13.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str29 = sortApplication0.getFilesContents(arraylist_str28);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\n" + "'", str27.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str28);

	}

	@Test
	public void test181() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test181");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, false, true, false);
		java.lang.String str20 = sortApplication0.sort("");
		java.lang.String str22 = sortApplication0.sort("\n");
		java.lang.String str24 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test182() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test182");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.lang.String str13 = sortApplication0.sortStringsSimple("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication14 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str16 = sortApplication14.sortNumbers("hi!");
		java.lang.String str18 = sortApplication14.sortCapitalSpecialChars("hi!");
		java.lang.String str20 = sortApplication14.sortAll("\n");
		java.lang.String str22 = sortApplication14.sort("\n");
		java.lang.String str24 = sortApplication14.sortCapitalNumbers("");
		java.lang.String str26 = sortApplication14.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str27 = sortApplication14.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str28 = sortApplication0.getFilesContents(arraylist_str27);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str27);

	}

	@Test
	public void test183() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test183");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test184() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test184");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

	}

	@Test
	public void test185() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test185");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test186() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test186");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test187() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test187");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortAll("hi!");
		java.lang.String str14 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test188() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test188");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str11 = sortApplication0.getStdinContents();
		java.lang.String str13 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str11);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test189() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test189");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str10 = sortApplication0.sortNumbers("\n");
		java.lang.String str12 = sortApplication0.sortNumbers("hi!");
		java.lang.String str14 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test190() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test190");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String[] str_array20 = new java.lang.String[] { "", "hi!", "\n", "hi!" };
		java.io.InputStream inputStream21 = null;
		java.io.OutputStream outputStream22 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array20, inputStream21, outputStream22);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

	}

	@Test
	public void test191() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test191");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, false, false, true);
		java.lang.String str12 = sortApplication0.sortStringsCapital("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test192() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test192");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str5 = sortApplication0.getStdinContents();
		java.lang.String str7 = sortApplication0.sortCapitalNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str5);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test193() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test193");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "hi!", "", "hi!" };
		java.io.InputStream inputStream16 = null;
		java.io.OutputStream outputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array15, inputStream16, outputStream17);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array15);

	}

	@Test
	public void test194() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test194");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortNumbers("\n");
		java.io.InputStream inputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream18);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

	}

	@Test
	public void test195() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test195");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test196() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test196");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortNumbersSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication18 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str20 = sortApplication18.sortNumbers("hi!");
		java.lang.String str22 = sortApplication18.sortCapitalSpecialChars("hi!");
		java.lang.String str24 = sortApplication18.sortAll("\n");
		java.lang.String str26 = sortApplication18.sort("\n");
		java.lang.String str28 = sortApplication18.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str30 = sortApplication18.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str32 = sortApplication18.sortSimpleCapital("");
		java.lang.String str34 = sortApplication18.sortCapitalNumbersSpecialChars("");
		java.lang.String str36 = sortApplication18.sortSimpleCapital("\n");
		java.lang.String str38 = sortApplication18.sortSimpleCapitalNumber("\n");
		java.util.ArrayList<java.lang.String> arraylist_str39 = sortApplication18.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str40 = sortApplication0.getFilesContents(arraylist_str39);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\n" + "'", str34.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\n" + "'", str36.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\n" + "'", str38.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str39);

	}

	@Test
	public void test197() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test197");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String[] str_array7 = null;
		java.io.InputStream inputStream8 = null;
		java.io.OutputStream outputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array7, inputStream8, outputStream9);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test198() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test198");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsCapital("");
		java.lang.String str14 = sortApplication0.sort("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test199() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test199");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str11 = sortApplication0.getStdinContents();
		java.lang.String str13 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str11);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test200() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test200");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str18 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str20 = sortApplication0.sortNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String str24 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test201() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test201");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test202() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test202");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortAll("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication6 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication6.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str8 = sortApplication0.getFilesContents(arraylist_str7);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

	}

	@Test
	public void test203() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test203");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();
		java.lang.String str19 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test204() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test204");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortAll("hi!");
		java.lang.String str19 = sortApplication0.sortCapitalNumbersSpecialChars("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication20 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str22 = sortApplication20.sortAll("hi!");
		java.lang.String str24 = sortApplication20.sortStringsCapital("");
		java.lang.String str26 = sortApplication20.sortAll("hi!");
		java.lang.String str28 = sortApplication20.sortNumbersSpecialChars("\n");
		java.lang.String str30 = sortApplication20.sort("");
		java.lang.String str32 = sortApplication20.sortSimpleCapitalSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str33 = sortApplication20.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str34 = sortApplication0.getFilesContents(arraylist_str33);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str33);

	}

	@Test
	public void test205() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test205");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test206() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test206");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test207() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test207");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

	}

	@Test
	public void test208() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test208");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test209() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test209");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String str17 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str19 = sortApplication0.sortCapitalNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test210() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test210");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();
		java.lang.String str9 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test211() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test211");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test212() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test212");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortNumbers("");
		java.lang.String str10 = sortApplication0.sortNumbers("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str13 = sortApplication11.sortNumbers("hi!");
		java.lang.String str15 = sortApplication11.sortCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication11.sortSimpleCapital("\n");
		java.lang.String str19 = sortApplication11.sortSimpleCapitalNumber("");
		java.lang.String str21 = sortApplication11.sortCapitalSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication11.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication0.getFilesContents(arraylist_str22);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str22);

	}

	@Test
	public void test213() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test213");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test214() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test214");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test215() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test215");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str15 = sortApplication0.invokeSortFunction("\n", false, false, true, true);
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication16 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str18 = sortApplication16.sortAll("hi!");
		java.lang.String str20 = sortApplication16.sortStringsCapital("");
		java.lang.String str22 = sortApplication16.sortAll("hi!");
		java.lang.String str28 = sortApplication16.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str30 = sortApplication16.sortSimpleNumbers("hi!");
		java.lang.String str32 = sortApplication16.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str33 = sortApplication16.getStdinContents();
		java.util.ArrayList<java.lang.String> arraylist_str34 = sortApplication16.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str35 = sortApplication0.getFilesContents(arraylist_str34);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str33);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str34);

	}

	@Test
	public void test216() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test216");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test217() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test217");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", true, true, true, true);
		java.lang.String str16 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str18 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test218() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test218");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str11 = sortApplication0.sortStringsCapital("");
		java.lang.String str13 = sortApplication0.sortAll("");
		java.lang.String str15 = sortApplication0.sortSimpleSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test219() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test219");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test220() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test220");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String str17 = sortApplication0.sortSimpleNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

	}

	@Test
	public void test221() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test221");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortNumbers("\n");
		java.lang.String str26 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

	}

	@Test
	public void test222() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test222");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortAll("hi!");
		java.lang.String str19 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str21 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test223() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test223");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sort("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test224() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test224");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbers("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.invokeSortFunction("", true, false, true, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test225() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test225");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str16 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test226() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test226");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String[] str_array18 = new java.lang.String[] { "\n", "", "\n" };
		java.io.InputStream inputStream19 = null;
		java.io.OutputStream outputStream20 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array18, inputStream19, outputStream20);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array18);

	}

	@Test
	public void test227() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test227");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test228() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test228");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortNumbers("");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test229() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test229");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String[] str_array6 = new java.lang.String[] { "", "\n", "\n" };
		java.io.InputStream inputStream7 = null;
		java.io.OutputStream outputStream8 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array6, inputStream7, outputStream8);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array6);

	}

	@Test
	public void test230() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test230");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test231() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test231");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sort("");
		java.lang.String str13 = sortApplication0.sortStringsCapital("");
		java.lang.String str15 = sortApplication0.sortSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test232() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test232");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str8 = sortApplication0.invokeSortFunction("", false, false, true, false);
		java.lang.String[] str_array10 = new java.lang.String[] { "" };
		java.io.InputStream inputStream11 = null;
		java.io.OutputStream outputStream12 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array10, inputStream11, outputStream12);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array10);

	}

	@Test
	public void test233() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test233");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "hi!", "", "", "\n" };
		java.io.InputStream inputStream23 = null;
		java.io.OutputStream outputStream24 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array22, inputStream23, outputStream24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

	}

	@Test
	public void test234() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test234");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str26 = sortApplication0.sortSimpleCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

	}

	@Test
	public void test235() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test235");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test236() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test236");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str6 = sortApplication0.invokeSortFunction("hi!", true, false, true, true);
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();
		java.lang.String str9 = sortApplication0.sortSimpleSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test237() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test237");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication0.getStdinContents();
		java.lang.String str14 = sortApplication0.sortAll("");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str22 = sortApplication0.invokeSortFunction("\n", true, false, false, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str12);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test238() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test238");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test239() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test239");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortNumbers("\n");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str18 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test240() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test240");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test241() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test241");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sort("");
		java.lang.String str11 = sortApplication0.sortNumbers("");
		java.io.InputStream inputStream12 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream12);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test242() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test242");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str8 = sortApplication0.sort("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test243() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test243");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test244() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test244");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test245() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test245");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test246() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test246");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test247() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test247");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("", false, true, false, true);
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str18 = sortApplication0.getFilesContents(arraylist_str17);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test248() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test248");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();
		java.lang.String str19 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test249() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test249");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String[] str_array19 = new java.lang.String[] { "\n", "hi!", "", "", "\n", "hi!" };
		java.io.InputStream inputStream20 = null;
		java.io.OutputStream outputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array19, inputStream20, outputStream21);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

	}

	@Test
	public void test250() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test250");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, false, true, false);
		java.lang.String str20 = sortApplication0.sort("");
		java.lang.String str22 = sortApplication0.sort("\n");
		java.lang.String str24 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test251() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test251");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String[] str_array23 = null;
		java.io.InputStream inputStream24 = null;
		java.io.OutputStream outputStream25 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array23, inputStream24, outputStream25);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test252() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test252");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("", false, false, false, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test253() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test253");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sort("hi!");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test254() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test254");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String[] str_array19 = new java.lang.String[] { "", "\n" };
		java.io.InputStream inputStream20 = null;
		java.io.OutputStream outputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array19, inputStream20, outputStream21);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

	}

	@Test
	public void test255() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test255");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test256() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test256");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sort("\n");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test257() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test257");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test258() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test258");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.io.InputStream inputStream12 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream12);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test259() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test259");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String[] str_array21 = new java.lang.String[] { "\n", "\n", "", "", "\n", "hi!" };
		java.io.InputStream inputStream22 = null;
		java.io.OutputStream outputStream23 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array21, inputStream22, outputStream23);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array21);

	}

	@Test
	public void test260() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test260");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test261() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test261");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortNumbers("\n");
		java.lang.String[] str_array13 = new java.lang.String[] { "\n", "\n", "hi!" };
		java.io.InputStream inputStream14 = null;
		java.io.OutputStream outputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array13, inputStream14, outputStream15);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array13);

	}

	@Test
	public void test262() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test262");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str1 = sortApplication0.getStdinContents();
		java.lang.String str3 = sortApplication0.sort("\n");
		java.lang.String str5 = sortApplication0.sortStringsSimple("");
		java.lang.String str7 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSpecialChars("\n");
		java.lang.String str11 = sortApplication0.sort("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\n" + "'", str3.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test263() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test263");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortSpecialChars("hi!");
		java.io.InputStream inputStream23 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream23);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test264() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test264");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test265() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test265");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str9 = sortApplication7.sortAll("hi!");
		java.lang.String str11 = sortApplication7.sortStringsCapital("");
		java.lang.String str13 = sortApplication7.sortAll("hi!");
		java.lang.String str15 = sortApplication7.sortNumbersSpecialChars("\n");
		java.lang.String str17 = sortApplication7.sortSimpleSpecialChars("");
		java.lang.String str19 = sortApplication7.sortSimpleCapitalNumber("hi!");
		java.lang.String str21 = sortApplication7.sortCapitalNumbers("\n");
		java.lang.String str23 = sortApplication7.sortAll("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication7.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str25 = sortApplication0.getFilesContents(arraylist_str24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str24);

	}

	@Test
	public void test266() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test266");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str6 = sortApplication0.invokeSortFunction("hi!", true, false, true, true);
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test267() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test267");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test268() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test268");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test269() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test269");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test270() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test270");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication0.getStdinContents();
		java.lang.String str25 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str23);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

	}

	@Test
	public void test271() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test271");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sort("\n");
		java.lang.String[] str_array16 = new java.lang.String[] { "\n", "hi!", "hi!", "\n", "hi!" };
		java.io.InputStream inputStream17 = null;
		java.io.OutputStream outputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array16, inputStream17, outputStream18);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

	}

	@Test
	public void test272() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test272");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str14 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test273() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test273");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str1 = sortApplication0.getStdinContents();
		java.lang.String str3 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str5 = sortApplication0.sortSimpleNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\n" + "'", str3.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

	}

	@Test
	public void test274() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test274");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbers("");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str19 = sortApplication17.sortAll("hi!");
		java.lang.String str21 = sortApplication17.sortStringsSimple("\n");
		java.lang.String str23 = sortApplication17.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication17.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str25 = sortApplication0.getFilesContents(arraylist_str24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str24);

	}

	@Test
	public void test275() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test275");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapital("");
		java.lang.String str12 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test276() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test276");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();
		java.lang.String str9 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str11 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str13 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test277() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test277");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str19 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test278() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test278");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str11 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str13 = sortApplication0.sortStringsSimple("");
		java.lang.String str15 = sortApplication0.sortSimpleCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test279() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test279");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str30 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str32 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

	}

	@Test
	public void test280() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test280");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str20 = sortApplication0.invokeSortFunction("\n", true, false, true, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test281() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test281");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str14 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str18 = sortApplication0.sort("");
		java.lang.String str20 = sortApplication0.sortSimpleNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test282() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test282");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String[] str_array12 = new java.lang.String[] { "hi!", "hi!" };
		java.io.InputStream inputStream13 = null;
		java.io.OutputStream outputStream14 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array12, inputStream13, outputStream14);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array12);

	}

	@Test
	public void test283() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test283");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str8 = sortApplication0.invokeSortFunction("", false, false, true, false);
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str11 = sortApplication9.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication9.getStdinContents();
		java.lang.String str14 = sortApplication9.sortSpecialChars("");
		java.lang.String str16 = sortApplication9.sortCapitalNumbersSpecialChars("");
		java.lang.String str22 = sortApplication9.invokeSortFunction("", true, true, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication9.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication0.getFilesContents(arraylist_str23);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str12);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str23);

	}

	@Test
	public void test284() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test284");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test285() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test285");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test286() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test286");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("");
		java.lang.String str18 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str20 = sortApplication0.sort("\n");
		java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str21);

	}

	@Test
	public void test287() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test287");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test288() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test288");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test289() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test289");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test290() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test290");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortAll("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str16 = sortApplication0.sortAll("hi!");
		java.lang.String[] str_array19 = new java.lang.String[] { "", "\n" };
		java.io.InputStream inputStream20 = null;
		java.io.OutputStream outputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array19, inputStream20, outputStream21);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

	}

	@Test
	public void test291() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test291");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test292() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test292");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test293() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test293");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication0.getStdinContents();
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str12);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test294() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test294");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test295() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test295");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test296() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test296");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str19 = sortApplication0.invokeSortFunction("hi!", false, false, false, false);
		java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication0.getStdinContents();
		java.lang.String str22 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str20);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test297() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test297");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test298() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test298");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortStringsCapital("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

	}

	@Test
	public void test299() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test299");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "hi!", "\n", "hi!", "" };
		java.io.InputStream inputStream17 = null;
		java.io.OutputStream outputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array16, inputStream17, outputStream18);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array16);

	}

	@Test
	public void test300() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test300");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test301() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test301");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str12 = sortApplication0.getStdinContents();
		java.lang.String str14 = sortApplication0.sortAll("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str12);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test302() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test302");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test303() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test303");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test304() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test304");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str11 = sortApplication9.sortNumbers("hi!");
		java.lang.String str13 = sortApplication9.sortCapitalSpecialChars("hi!");
		java.lang.String str15 = sortApplication9.sortAll("\n");
		java.lang.String str17 = sortApplication9.sort("\n");
		java.lang.String str19 = sortApplication9.sortCapitalNumbers("");
		java.lang.String str21 = sortApplication9.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str22 = sortApplication9.getStdinContents();
		java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication9.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication0.getFilesContents(arraylist_str23);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str22);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str23);

	}

	@Test
	public void test305() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test305");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str16 = sortApplication0.sortNumbers("\n");
		java.lang.String str18 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str20 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test306() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test306");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortStringsCapital("");
		java.lang.String[] str_array20 = new java.lang.String[] { "", "", "", "hi!", "hi!" };
		java.io.InputStream inputStream21 = null;
		java.io.OutputStream outputStream22 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array20, inputStream21, outputStream22);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

	}

	@Test
	public void test307() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test307");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication11 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str13 = sortApplication11.sortNumbers("hi!");
		java.lang.String str15 = sortApplication11.sortCapitalSpecialChars("");
		java.lang.String str17 = sortApplication11.sortSimpleCapitalNumber("\n");
		java.lang.String str19 = sortApplication11.sortNumbersSpecialChars("\n");
		java.lang.String str21 = sortApplication11.sortCapitalNumbers("");
		java.lang.String str23 = sortApplication11.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication11.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str25 = sortApplication0.getFilesContents(arraylist_str24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str24);

	}

	@Test
	public void test308() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test308");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();
		java.io.InputStream inputStream18 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream18);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

	}

	@Test
	public void test309() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test309");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str12 = sortApplication0.sortAll("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str15 = sortApplication13.sortNumbers("hi!");
		java.lang.String str17 = sortApplication13.sortCapitalSpecialChars("hi!");
		java.lang.String str19 = sortApplication13.sortAll("\n");
		java.lang.String str21 = sortApplication13.sort("\n");
		java.lang.String str23 = sortApplication13.sortCapitalNumbers("");
		java.lang.String str25 = sortApplication13.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str26 = sortApplication13.getStdinContents();
		java.util.ArrayList<java.lang.String> arraylist_str27 = sortApplication13.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str28 = sortApplication0.getFilesContents(arraylist_str27);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str26);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str27);

	}

	@Test
	public void test310() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test310");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("");
		java.lang.String str14 = sortApplication0.sortAll("\n");
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test311() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test311");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str7 = sortApplication0.sortAll("\n");
		java.lang.String str9 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test312() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test312");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sort("hi!");
		java.lang.String str14 = sortApplication0.sortSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test313() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test313");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortNumbers("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String[] str_array17 = new java.lang.String[] {};
		java.io.InputStream inputStream18 = null;
		java.io.OutputStream outputStream19 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array17, inputStream18, outputStream19);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array17);

	}

	@Test
	public void test314() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test314");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test315() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test315");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sort("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test316() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test316");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.io.InputStream inputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test317() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test317");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test318() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test318");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.io.InputStream inputStream11 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream11);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test319() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test319");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test320() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test320");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test321() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test321");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str16 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test322() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test322");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test323() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test323");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortNumbers("\n");
		java.lang.String str19 = sortApplication0.sortSimpleNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test324() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test324");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str11 = sortApplication0.sortStringsCapital("");
		java.lang.String str13 = sortApplication0.sortAll("");
		java.lang.String str15 = sortApplication0.sortAll("\n");
		java.io.InputStream inputStream16 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream16);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test325() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test325");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test326() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test326");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test327() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test327");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String[] str_array34 = new java.lang.String[] { "\n", "", "", "\n", "" };
		java.io.InputStream inputStream35 = null;
		java.io.OutputStream outputStream36 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array34, inputStream35, outputStream36);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array34);

	}

	@Test
	public void test328() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test328");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test329() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test329");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sortStringsSimple("");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test330() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test330");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str11 = sortApplication0.sortStringsCapital("");
		java.lang.String str13 = sortApplication0.sortAll("");
		java.lang.String str15 = sortApplication0.sortAll("\n");
		java.lang.String str17 = sortApplication0.sortCapitalNumbers("");
		java.lang.String[] str_array19 = new java.lang.String[] { "hi!" };
		java.io.InputStream inputStream20 = null;
		java.io.OutputStream outputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array19, inputStream20, outputStream21);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array19);

	}

	@Test
	public void test331() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test331");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test332() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test332");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortAll("");
		java.lang.String str18 = sortApplication0.sort("");
		java.lang.String str20 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test333() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test333");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortNumbers("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str18 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test334() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test334");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.io.InputStream inputStream12 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream12);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test335() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test335");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test336() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test336");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str30 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str32 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str34 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\n" + "'", str34.equals("\n"));

	}

	@Test
	public void test337() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test337");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test338() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test338");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

	}

	@Test
	public void test339() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test339");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test340() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test340");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str18 = sortApplication0.sortStringsCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test341() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test341");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSpecialChars("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test342() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test342");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test343() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test343");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str19 = sortApplication17.sortAll("hi!");
		java.lang.String str21 = sortApplication17.sortStringsSimple("\n");
		java.lang.String str23 = sortApplication17.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication17.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str25 = sortApplication0.getFilesContents(arraylist_str24);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str24);

	}

	@Test
	public void test344() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test344");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

	}

	@Test
	public void test345() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test345");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str14 = sortApplication0.sortStringsSimple("");
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str18 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test346() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test346");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str18 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test347() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test347");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str16 = sortApplication0.sortNumbers("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test348() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test348");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str16 = sortApplication0.invokeSortFunction("", true, false, false, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test349() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test349");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str16 = sortApplication0.invokeSortFunction("", false, false, true, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test350() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test350");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test351() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test351");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str6 = sortApplication0.invokeSortFunction("hi!", true, false, true, true);
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test352() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test352");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str30 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str32 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str34 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\n" + "'", str34.equals("\n"));

	}

	@Test
	public void test353() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test353");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String[] str_array15 = new java.lang.String[] { "\n" };
		java.io.InputStream inputStream16 = null;
		java.io.OutputStream outputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array15, inputStream16, outputStream17);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array15);

	}

	@Test
	public void test354() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test354");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String[] str_array20 = new java.lang.String[] { "\n", "", "hi!" };
		java.io.InputStream inputStream21 = null;
		java.io.OutputStream outputStream22 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array20, inputStream21, outputStream22);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

	}

	@Test
	public void test355() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test355");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test356() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test356");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str10 = sortApplication8.sortAll("hi!");
		java.lang.String str12 = sortApplication8.sortStringsCapital("");
		java.lang.String str14 = sortApplication8.sortAll("hi!");
		java.lang.String str16 = sortApplication8.sortNumbersSpecialChars("\n");
		java.lang.String str18 = sortApplication8.sortSimpleSpecialChars("");
		java.lang.String str20 = sortApplication8.sortSimpleCapitalNumber("hi!");
		java.lang.String str22 = sortApplication8.sortNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str23 = sortApplication8.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication0.getFilesContents(arraylist_str23);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str23);

	}

	@Test
	public void test357() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test357");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sort("hi!");
		java.lang.String str18 = sortApplication0.sort("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test358() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test358");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test359() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test359");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbers("");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test360() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test360");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str19 = sortApplication0.invokeSortFunction("hi!", false, false, false, true);
		java.lang.String str21 = sortApplication0.sortAll("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test361() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test361");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", false, false, true, true);
		java.lang.String str18 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test362() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test362");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str12 = sortApplication0.sortAll("\n");
		java.lang.String str14 = sortApplication0.sortSimpleNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test363() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test363");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortSimpleCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

	}

	@Test
	public void test364() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test364");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str8 = sortApplication0.invokeSortFunction("", false, false, true, false);
		java.lang.String str10 = sortApplication0.sortStringsCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test365() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test365");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("");
		java.io.InputStream inputStream7 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream7);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

	}

	@Test
	public void test366() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test366");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.util.ArrayList<java.lang.String> arraylist_str5 = sortApplication0.getStdinContents();
		java.lang.String str7 = sortApplication0.sortNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str5);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test367() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test367");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test368() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test368");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();
		java.lang.String str23 = sortApplication0.invokeSortFunction("hi!", false, false, true, false);
		java.lang.String str25 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

	}

	@Test
	public void test369() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test369");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortNumbers("");
		java.lang.String str12 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test370() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test370");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortAll("\n");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str20 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test371() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test371");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortNumbers("hi!");
		java.lang.String str20 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test372() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test372");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortAll("hi!");
		java.lang.String str19 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str21 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test373() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test373");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapital("");
		java.lang.String str12 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test374() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test374");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortNumbers("");
		java.lang.String str20 = sortApplication0.invokeSortFunction("\n", false, false, false, true);
		java.lang.String str22 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str24 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test375() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test375");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("", false, true, false, false);
		java.lang.String str13 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test376() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test376");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test377() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test377");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.sortStringsCapital("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test378() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test378");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortStringsSimple("");
		java.lang.String str16 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test379() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test379");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str14 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str18 = sortApplication0.sortSimpleSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test380() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test380");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("", true, true, false, false);
		java.io.InputStream inputStream15 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream15);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test381() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test381");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, false, false, true);
		java.lang.String str12 = sortApplication0.sortStringsCapital("");
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test382() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test382");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("", false, true, true, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test383() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test383");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortSpecialChars("");
		java.lang.String[] str_array26 = new java.lang.String[] { "", "hi!", "\n", "hi!", "hi!" };
		java.io.InputStream inputStream27 = null;
		java.io.OutputStream outputStream28 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array26, inputStream27, outputStream28);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array26);

	}

	@Test
	public void test384() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test384");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("\n");
		java.io.InputStream inputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream17);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test385() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test385");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("");
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str20 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str24 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test386() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test386");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test387() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test387");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String[] str_array15 = new java.lang.String[] { "", "\n", "hi!" };
		java.io.InputStream inputStream16 = null;
		java.io.OutputStream outputStream17 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array15, inputStream16, outputStream17);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array15);

	}

	@Test
	public void test388() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test388");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("");
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str20 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortCapitalNumbers("");
		java.lang.String[] str_array23 = new java.lang.String[] {};
		java.io.InputStream inputStream24 = null;
		java.io.OutputStream outputStream25 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array23, inputStream24, outputStream25);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array23);

	}

	@Test
	public void test389() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test389");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

	}

	@Test
	public void test390() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test390");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str24 = sortApplication0.sortStringsCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test391() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test391");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortAll("hi!");
		java.lang.String str18 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortStringsCapital("hi!");
		java.lang.String str22 = sortApplication0.sortNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test392() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test392");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbers("");
		java.lang.String str18 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str20 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test393() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test393");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.io.InputStream inputStream9 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream9);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test394() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test394");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();
		java.lang.String str19 = sortApplication0.sortAll("hi!");
		java.lang.String str21 = sortApplication0.sort("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test395() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test395");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sort("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test396() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test396");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortAll("\n");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test397() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test397");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String str17 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String[] str_array20 = new java.lang.String[] { "\n", "hi!" };
		java.io.InputStream inputStream21 = null;
		java.io.OutputStream outputStream22 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array20, inputStream21, outputStream22);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

	}

	@Test
	public void test398() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test398");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalNumber("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test399() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test399");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String[] str_array22 = new java.lang.String[] { "" };
		java.io.InputStream inputStream23 = null;
		java.io.OutputStream outputStream24 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array22, inputStream23, outputStream24);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array22);

	}

	@Test
	public void test400() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test400");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test401() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test401");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortAll("hi!");
		java.lang.String str19 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str21 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test402() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test402");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str18 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str20 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getStdinContents();
		java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "hi!", "" };
		java.io.InputStream inputStream26 = null;
		java.io.OutputStream outputStream27 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array25, inputStream26, outputStream27);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str21);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array25);

	}

	@Test
	public void test403() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test403");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str18 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.lang.String str20 = sortApplication0.sortSimpleCapital("");
		java.io.InputStream inputStream21 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream21);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test404() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test404");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str18 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str20 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str22 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String[] str_array23 = new java.lang.String[] {};
		java.io.InputStream inputStream24 = null;
		java.io.OutputStream outputStream25 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array23, inputStream24, outputStream25);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array23);

	}

	@Test
	public void test405() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test405");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str8 = sortApplication0.sortSimpleSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test406() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test406");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str6 = sortApplication0.invokeSortFunction("hi!", true, false, true, true);
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();
		java.lang.String str9 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test407() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test407");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication7 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str9 = sortApplication7.sortAll("hi!");
		java.lang.String str11 = sortApplication7.sortStringsCapital("");
		java.lang.String str13 = sortApplication7.sortAll("hi!");
		java.lang.String str19 = sortApplication7.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str21 = sortApplication7.sortSimpleNumbers("hi!");
		java.lang.String str23 = sortApplication7.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str24 = sortApplication7.getStdinContents();
		java.util.ArrayList<java.lang.String> arraylist_str25 = sortApplication7.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str26 = sortApplication0.getFilesContents(arraylist_str25);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str24);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str25);

	}

	@Test
	public void test408() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test408");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test409() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test409");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test410() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test410");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str8 = sortApplication0.invokeSortFunction("", false, false, true, false);
		java.lang.String str10 = sortApplication0.sortNumbers("");
		java.lang.String str12 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test411() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test411");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.lang.String str13 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test412() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test412");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication0.getStdinContents();
		java.io.InputStream inputStream20 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream20);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str19);

	}

	@Test
	public void test413() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test413");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str8 = sortApplication0.invokeSortFunction("", false, false, true, false);
		java.lang.String str10 = sortApplication0.sortNumbers("");
		java.lang.String str12 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test414() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test414");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str12 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test415() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test415");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.invokeSortFunction("hi!", true, true, false, true);
		java.lang.String[] str_array32 = new java.lang.String[] { "", "hi!", "" };
		java.util.ArrayList<java.lang.String> arraylist_str33 = new java.util.ArrayList<java.lang.String>();
		boolean b34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) arraylist_str33,
				str_array32);
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str35 = sortApplication0.getFilesContents(arraylist_str33);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array32);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue(b34 == true);

	}

	@Test
	public void test416() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test416");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str19);

	}

	@Test
	public void test417() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test417");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sort("");
		java.lang.String str11 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str13 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test418() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test418");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str19 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test419() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test419");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortStringsSimple("");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test420() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test420");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortNumbers("hi!");
		java.lang.String str20 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test421() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test421");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test422() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test422");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test423() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test423");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sort("");
		java.lang.String str13 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str14 = sortApplication0.getStdinContents();
		java.lang.String str16 = sortApplication0.sortSimpleCapitalNumber("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str14);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test424() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test424");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str18 = sortApplication0.sortSimpleNumbers("\n");
		java.lang.String str20 = sortApplication0.sortNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortCapitalNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test425() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test425");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str18 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test426() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test426");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str7 = sortApplication0.getStdinContents();
		java.lang.String str9 = sortApplication0.sortNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str7);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test427() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test427");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test428() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test428");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str7 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str13 = sortApplication0.invokeSortFunction("\n", true, true, false, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

	}

	@Test
	public void test429() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test429");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortCapitalNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test430() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test430");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.invokeSortFunction("hi!", true, true, false, true);
		java.lang.String str30 = sortApplication0.sort("\n");
		java.lang.String str32 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\n" + "'", str32.equals("\n"));

	}

	@Test
	public void test431() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test431");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str19 = sortApplication0.invokeSortFunction("hi!", false, false, false, true);
		java.lang.String str21 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test432() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test432");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str13 = sortApplication0.sortStringsCapital("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalNumber("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test433() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test433");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str22 = sortApplication0.sortStringsCapital("");
		java.io.InputStream inputStream23 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.setStdin(inputStream23);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test434() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test434");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test435() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test435");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str19 = sortApplication0.invokeSortFunction("hi!", false, false, false, false);
		java.lang.String str21 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str23 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str25 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

	}

	@Test
	public void test436() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test436");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test437() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test437");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortAll("\n");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str20 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test438() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test438");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str11 = sortApplication0.sort("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test439() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test439");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str16 = sortApplication0.sortSimpleNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test440() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test440");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortSimpleNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test441() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test441");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str22 = sortApplication0.sortStringsCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test442() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test442");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str20 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str22 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str24 = sortApplication0.sortSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test443() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test443");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortNumbers("\n");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str16 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.invokeSortFunction("\n", false, false, true, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test444() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test444");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String str17 = sortApplication0.sortStringsSimple("");
		java.lang.String[] str_array20 = new java.lang.String[] { "", "" };
		java.io.InputStream inputStream21 = null;
		java.io.OutputStream outputStream22 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array20, inputStream21, outputStream22);
			org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
		} catch (java.lang.StringIndexOutOfBoundsException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array20);

	}

	@Test
	public void test445() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test445");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str16 = sortApplication0.sortCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test446() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test446");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleCapitalNumber("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test447() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test447");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str10 = sortApplication0.sortAll("hi!");
		java.lang.String[] str_array11 = new java.lang.String[] {};
		java.io.InputStream inputStream12 = null;
		java.io.OutputStream outputStream13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array11, inputStream12, outputStream13);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array11);

	}

	@Test
	public void test448() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test448");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str7 = sortApplication0.sortSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test449() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test449");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortNumbers("\n");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str28 = sortApplication0.sortStringsCapital("");
		java.lang.String str30 = sortApplication0.sortStringsSimple("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\n" + "'", str30.equals("\n"));

	}

	@Test
	public void test450() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test450");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String str17 = sortApplication0.sortSimpleSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

	}

	@Test
	public void test451() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test451");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortNumbers("hi!");
		java.lang.String str24 = sortApplication0.invokeSortFunction("hi!", false, false, true, false);
		java.lang.String str26 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String[] str_array29 = new java.lang.String[] { "\n", "hi!" };
		java.io.InputStream inputStream30 = null;
		java.io.OutputStream outputStream31 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array29, inputStream30, outputStream31);
			org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException");
		} catch (java.nio.file.InvalidPathException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array29);

	}

	@Test
	public void test452() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test452");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sort("");
		java.lang.String str13 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str19 = sortApplication0.invokeSortFunction("\n", true, true, true, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test453() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test453");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str16 = sortApplication0.sortSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str22 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String str24 = sortApplication0.sortSimpleCapital("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test454() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test454");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str16 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str22 = sortApplication0.invokeSortFunction("", true, false, false, true);
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str26 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str28 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.util.ArrayList<java.lang.String> arraylist_str29 = sortApplication0.getStdinContents();
		java.lang.String str31 = sortApplication0.sortStringsSimple("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\n" + "'", str28.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str29);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\n" + "'", str31.equals("\n"));

	}

	@Test
	public void test455() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test455");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortStringsSimple("\n");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str17 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str19 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str21 = sortApplication0.sortSimpleNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test456() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test456");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

	}

	@Test
	public void test457() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test457");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str12 = sortApplication0.sortNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test458() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test458");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortAll("");
		java.lang.String str18 = sortApplication0.sort("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test459() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test459");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalNumber("");
		java.util.ArrayList<java.lang.String> arraylist_str9 = sortApplication0.getStdinContents();
		java.lang.String str11 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str13 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str17 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str19 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str9);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test460() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test460");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortAll("");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbers("");
		java.lang.String str18 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str20 = sortApplication0.sortSimpleCapitalNumber("");
		java.lang.String str22 = sortApplication0.sortCapitalNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

	}

	@Test
	public void test461() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test461");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("\n");
		java.lang.String str9 = sortApplication0.sortCapitalNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

	}

	@Test
	public void test462() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test462");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str11 = sortApplication0.sortNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

	}

	@Test
	public void test463() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test463");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str18 = sortApplication0.sortAll("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test464() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test464");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortAll("\n");
		java.lang.String str8 = sortApplication0.sort("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbers("");
		java.lang.String str18 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str20 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

	}

	@Test
	public void test465() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test465");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str12 = sortApplication0.sortAll("\n");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test466() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test466");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str22 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str24 = sortApplication0.sortNumbers("\n");
		java.lang.String str26 = sortApplication0.sortNumbers("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\n" + "'", str26.equals("\n"));

	}

	@Test
	public void test467() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test467");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.lang.String str13 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str17 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str19 = sortApplication0.sortStringsCapital("\n");
		java.lang.String str21 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test468() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test468");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str10 = sortApplication0.invokeSortFunction("hi!", true, true, true, false);
		java.lang.String str16 = sortApplication0.invokeSortFunction("hi!", true, false, false, false);
		java.lang.String str18 = sortApplication0.sortNumbers("");
		java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication0.getStdinContents();
		java.util.ArrayList<java.lang.String> arraylist_str20 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str21 = sortApplication0.getFilesContents(arraylist_str20);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str19);

	}

	@Test
	public void test469() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test469");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortAll("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test470() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test470");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str8 = sortApplication0.sortStringsSimple("");
		java.lang.String str10 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test471() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test471");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str13 = sortApplication0.getStdinContents();
		java.lang.String str15 = sortApplication0.sortSimpleSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str13);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test472() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test472");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortAll("\n");
		java.lang.String str18 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str20 = sortApplication0.sort("\n");
		java.lang.String str22 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str24 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test473() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test473");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str18 = sortApplication0.invokeSortFunction("", false, true, true, true);
		java.lang.String str20 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str22 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String str24 = sortApplication0.sortSimpleSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test474() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test474");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str14 = sortApplication0.sort("");
		java.lang.String str16 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test475() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test475");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str16 = sortApplication0.sort("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test476() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test476");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test477() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test477");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.sortNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test478() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test478");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sort("");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str10 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str16 = sortApplication0.invokeSortFunction("\n", true, true, false, true);
		java.lang.String str22 = sortApplication0.invokeSortFunction("hi!", false, false, true, false);
		java.lang.String str24 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test479() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test479");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str14 = sortApplication0.invokeSortFunction("hi!", false, false, false, true);
		java.lang.String str16 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

	}

	@Test
	public void test480() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test480");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", true, false, true, true);
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str20 = sortApplication0.invokeSortFunction("", true, true, false, true);
		java.lang.String str22 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str24 = sortApplication0.sortStringsSimple("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\n" + "'", str20.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\n" + "'", str22.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\n" + "'", str24.equals("\n"));

	}

	@Test
	public void test481() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test481");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalSpecialChars("\n");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication8 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str10 = sortApplication8.sortNumbers("hi!");
		java.lang.String str12 = sortApplication8.sortCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication8.sortAll("\n");
		java.lang.String str16 = sortApplication8.sort("\n");
		java.lang.String str18 = sortApplication8.sortSimpleSpecialChars("");
		java.util.ArrayList<java.lang.String> arraylist_str19 = sortApplication8.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str20 = sortApplication0.getFilesContents(arraylist_str19);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str19);

	}

	@Test
	public void test482() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test482");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str12 = sortApplication0.invokeSortFunction("hi!", false, true, true, false);
		java.lang.String str14 = sortApplication0.sortCapitalSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test483() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test483");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str14 = sortApplication0.sortCapitalNumbers("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

	}

	@Test
	public void test484() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test484");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortNumbersSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortSimpleCapital("");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str18 = sortApplication0.sortSimpleCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test485() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test485");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str12 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortNumbersSpecialChars("hi!");
		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication17 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str19 = sortApplication17.sortAll("hi!");
		java.lang.String str21 = sortApplication17.sortStringsCapital("");
		java.lang.String str23 = sortApplication17.sortAll("hi!");
		java.lang.String str25 = sortApplication17.sortNumbersSpecialChars("\n");
		java.lang.String str27 = sortApplication17.sortSimpleSpecialChars("");
		java.lang.String str33 = sortApplication17.invokeSortFunction("", true, false, false, true);
		java.util.ArrayList<java.lang.String> arraylist_str34 = sortApplication17.getStdinContents();
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str35 = sortApplication0.getFilesContents(arraylist_str34);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\n" + "'", str23.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\n" + "'", str25.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\n" + "'", str27.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\n" + "'", str33.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str34);

	}

	@Test
	public void test486() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test486");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortNumbers("hi!");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test487() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test487");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSpecialChars("");
		java.lang.String str7 = sortApplication0.sortCapitalNumbersSpecialChars("");
		java.lang.String str9 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str11 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str13 = sortApplication0.sortStringsSimple("");
		java.lang.String str15 = sortApplication0.sortCapitalNumbers("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\n" + "'", str9.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

	}

	@Test
	public void test488() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test488");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str8 = sortApplication0.sortCapitalNumbers("\n");
		java.lang.String str10 = sortApplication0.sort("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test489() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test489");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleCapital("hi!");
		java.lang.String str8 = sortApplication0.sortNumbers("hi!");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str12 = sortApplication0.sortNumbers("");
		java.lang.String str18 = sortApplication0.invokeSortFunction("\n", false, true, false, false);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test490() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test490");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.lang.String str13 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str17 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str19 = sortApplication0.sortSimpleNumbersSpecialChars("hi!");
		java.lang.String str21 = sortApplication0.sortSimpleCapitalSpecialChars("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

	}

	@Test
	public void test491() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test491");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str7 = sortApplication0.sortAll("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\n" + "'", str7.equals("\n"));

	}

	@Test
	public void test492() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test492");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str6 = sortApplication0.sortSimpleNumbers("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortStringsCapital("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

	}

	@Test
	public void test493() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test493");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortAll("hi!");
		java.lang.String str8 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str10 = sortApplication0.sortNumbersSpecialChars("\n");
		java.lang.String str12 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str14 = sortApplication0.sortSimpleSpecialChars("hi!");
		java.lang.String str16 = sortApplication0.sortSimpleSpecialChars("");
		java.lang.String str18 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\n" + "'", str18.equals("\n"));

	}

	@Test
	public void test494() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test494");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.util.ArrayList<java.lang.String> arraylist_str1 = sortApplication0.getStdinContents();
		java.lang.String str3 = sortApplication0.sort("\n");
		java.lang.String str5 = sortApplication0.sortAll("hi!");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str1);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\n" + "'", str3.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

	}

	@Test
	public void test495() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test495");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortAll("");
		java.lang.String str6 = sortApplication0.sortSimpleSpecialChars("\n");
		java.lang.String str8 = sortApplication0.sortStringsCapital("");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

	}

	@Test
	public void test496() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test496");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.lang.String str4 = sortApplication0.sortCapitalSpecialChars("hi!");
		java.lang.String str6 = sortApplication0.sortNumbers("\n");
		java.lang.String str8 = sortApplication0.sortStringsSimple("\n");
		java.lang.String str10 = sortApplication0.sortCapitalNumbers("");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalNumber("\n");
		java.lang.String str14 = sortApplication0.sortNumbersSpecialChars("");
		java.lang.String str16 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str17 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\n" + "'", str16.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str17);

	}

	@Test
	public void test497() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test497");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortStringsCapital("");
		java.lang.String str6 = sortApplication0.sortSimpleNumbersSpecialChars("");
		java.lang.String str12 = sortApplication0.invokeSortFunction("\n", false, false, false, false);
		java.util.ArrayList<java.lang.String> arraylist_str13 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			java.util.ArrayList<java.lang.String> arraylist_str14 = sortApplication0.getFilesContents(arraylist_str13);
			org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
		} catch (java.lang.NullPointerException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

	}

	@Test
	public void test498() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test498");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortAll("hi!");
		java.lang.String str4 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str6 = sortApplication0.sortCapitalSpecialChars("");
		java.lang.String str8 = sortApplication0.sortSimpleCapitalSpecialChars("");
		java.lang.String str10 = sortApplication0.sortSimpleNumbers("hi!");
		java.lang.String str12 = sortApplication0.sortSimpleCapitalSpecialChars("hi!");
		java.lang.String str14 = sortApplication0.sortStringsCapital("\n");
		java.util.ArrayList<java.lang.String> arraylist_str15 = sortApplication0.getStdinContents();
		java.lang.String str17 = sortApplication0.sortNumbers("");
		java.lang.String str19 = sortApplication0.sortSimpleNumbersSpecialChars("\n");

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\n" + "'", str4.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\n" + "'", str6.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\n" + "'", str8.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\n" + "'", str10.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\n" + "'", str12.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\n" + "'", str14.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str15);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

	}

	@Test
	public void test499() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test499");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.lang.String str13 = sortApplication0.sortSimpleCapital("\n");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalSpecialChars("\n");
		java.lang.String str17 = sortApplication0.sortCapitalSpecialChars("\n");
		java.lang.String str19 = sortApplication0.sortSimpleNumbersSpecialChars("\n");
		java.lang.String str21 = sortApplication0.sortCapitalNumbersSpecialChars("hi!");
		java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "\n", "\n", "\n", "\n" };
		java.io.InputStream inputStream28 = null;
		java.io.OutputStream outputStream29 = null;
		// The following exception was thrown during execution in test
		// generation
		try {
			sortApplication0.run(str_array27, inputStream28, outputStream29);
			org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
		} catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
			// Expected exception.
		}

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\n" + "'", str17.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\n" + "'", str19.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\n" + "'", str21.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(str_array27);

	}

	@Test
	public void test500() throws Throwable {

		if (debug) {
			System.out.format("%n%s%n", "RegressionTest0.test500");
		}

		sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
		java.lang.String str2 = sortApplication0.sortNumbers("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str3 = sortApplication0.getStdinContents();
		java.lang.String str5 = sortApplication0.sortSimpleCapital("");
		java.lang.String str11 = sortApplication0.invokeSortFunction("hi!", false, true, true, true);
		java.lang.String str13 = sortApplication0.sortStringsSimple("hi!");
		java.lang.String str15 = sortApplication0.sortSimpleCapitalNumber("hi!");
		java.util.ArrayList<java.lang.String> arraylist_str16 = sortApplication0.getStdinContents();

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str2 + "' != '" + "\n" + "'", str2.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str3);

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\n" + "'", str5.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\n" + "'", str11.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\n" + "'", str13.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\n" + "'", str15.equals("\n"));

		// Regression assertion (captures the current behavior of the code)
		org.junit.Assert.assertNotNull(arraylist_str16);

	}

}
